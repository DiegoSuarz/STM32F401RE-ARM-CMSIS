
01_RCC_Config.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000450  08000450  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000450  08000450  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000450  08000450  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000450  08000450  00010450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000454  08000454  00010454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  0800045c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800045c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000830  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000206  00000000  00000000  00020864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00020a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  00020af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc05  00000000  00000000  00020b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b2f  00000000  00000000  0002e74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f4ca  00000000  00000000  0002f27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007e746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  0007e798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000428 	.word	0x08000428

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000428 	.word	0x08000428

080001d4 <main>:
void HSI_Sysclk(void); //función que permite seleccionar el HSI (reloj interno) como fuente para el SYSCLK

void HSE_Sysclk(void); //función que permite seleccionar el HSE (reloj externo)como fuente para el SYSCLK

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	HSI_Sysclk(); //seleccionar HSI como fuente de reloj
 80001d8:	f000 f804 	bl	80001e4 <HSI_Sysclk>
	HSE_Sysclk();
 80001dc:	f000 f824 	bl	8000228 <HSE_Sysclk>
    /* Loop forever */
	for(;;);
 80001e0:	e7fe      	b.n	80001e0 <main+0xc>
	...

080001e4 <HSI_Sysclk>:
}

/*Function definition*/
void HSI_Sysclk(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	//1er paso: Habilitar el reloj requerido y esperar a que este listo:
	RCC -> CR |= RCC_CR_HSION;//habilitar el HSI:   RCC -> CR |= (1U << 0);
 80001e8:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <HSI_Sysclk+0x40>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <HSI_Sysclk+0x40>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSIRDY)); //Esperar a que el reloj se estabilice
 80001f4:	bf00      	nop
 80001f6:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <HSI_Sysclk+0x40>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d0f9      	beq.n	80001f6 <HSI_Sysclk+0x12>
	RCC->CFGR &= ~(RCC_CFGR_SW); //Seleccionar HSI como fuente de reloj del SYSCLK
 8000202:	4b08      	ldr	r3, [pc, #32]	; (8000224 <HSI_Sysclk+0x40>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a07      	ldr	r2, [pc, #28]	; (8000224 <HSI_Sysclk+0x40>)
 8000208:	f023 0303 	bic.w	r3, r3, #3
 800020c:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & RCC_CFGR_SWS)); //Esperar a que se habilite el HSI (revisa el estado del reloj)
 800020e:	bf00      	nop
 8000210:	4b04      	ldr	r3, [pc, #16]	; (8000224 <HSI_Sysclk+0x40>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	f003 030c 	and.w	r3, r3, #12
 8000218:	2b00      	cmp	r3, #0
 800021a:	d0f9      	beq.n	8000210 <HSI_Sysclk+0x2c>

	SystemCoreClockUpdate(); //actualiza la frecuencia que se ha definido para HSI (16 MHz)
 800021c:	f000 f836 	bl	800028c <SystemCoreClockUpdate>

}
 8000220:	bf00      	nop
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40023800 	.word	0x40023800

08000228 <HSE_Sysclk>:
void HSE_Sysclk(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	RCC -> CR |= RCC_CR_HSEON; //habilitar el HSE
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <HSE_Sysclk+0x3c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0c      	ldr	r2, [pc, #48]	; (8000264 <HSE_Sysclk+0x3c>)
 8000232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000236:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));//Esperar a que el reloj se estabilice
 8000238:	bf00      	nop
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <HSE_Sysclk+0x3c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <HSE_Sysclk+0x12>

	//Habilitar el modo ByPass para la fuente de reloj externo del STLINK
	RCC-> CFGR = RCC_CFGR_SW_HSE;  //Seleccionar HSE como fuente de sistema (SYSCLK)
 8000246:	4b07      	ldr	r3, [pc, #28]	; (8000264 <HSE_Sysclk+0x3c>)
 8000248:	2201      	movs	r2, #1
 800024a:	609a      	str	r2, [r3, #8]
	while(!(RCC->CFGR & RCC_CFGR_SWS_HSE)); //Esperar hasta que se haga el cambio de fuente de reloj
 800024c:	bf00      	nop
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <HSE_Sysclk+0x3c>)
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	f003 0304 	and.w	r3, r3, #4
 8000256:	2b00      	cmp	r3, #0
 8000258:	d0f9      	beq.n	800024e <HSE_Sysclk+0x26>
	SystemCoreClockUpdate(); //actualiza la frecuencia que se ha definido para HSE (8 MHz)
 800025a:	f000 f817 	bl	800028c <SystemCoreClockUpdate>



}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800

08000268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <SystemInit+0x20>)
 800026e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000272:	4a05      	ldr	r2, [pc, #20]	; (8000288 <SystemInit+0x20>)
 8000274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]
 800029a:	2302      	movs	r3, #2
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	2302      	movs	r3, #2
 80002a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80002a6:	4b34      	ldr	r3, [pc, #208]	; (8000378 <SystemCoreClockUpdate+0xec>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	f003 030c 	and.w	r3, r3, #12
 80002ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	2b08      	cmp	r3, #8
 80002b4:	d011      	beq.n	80002da <SystemCoreClockUpdate+0x4e>
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	2b08      	cmp	r3, #8
 80002ba:	d844      	bhi.n	8000346 <SystemCoreClockUpdate+0xba>
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d003      	beq.n	80002ca <SystemCoreClockUpdate+0x3e>
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	2b04      	cmp	r3, #4
 80002c6:	d004      	beq.n	80002d2 <SystemCoreClockUpdate+0x46>
 80002c8:	e03d      	b.n	8000346 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80002ca:	4b2c      	ldr	r3, [pc, #176]	; (800037c <SystemCoreClockUpdate+0xf0>)
 80002cc:	4a2c      	ldr	r2, [pc, #176]	; (8000380 <SystemCoreClockUpdate+0xf4>)
 80002ce:	601a      	str	r2, [r3, #0]
      break;
 80002d0:	e03d      	b.n	800034e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80002d2:	4b2a      	ldr	r3, [pc, #168]	; (800037c <SystemCoreClockUpdate+0xf0>)
 80002d4:	4a2b      	ldr	r2, [pc, #172]	; (8000384 <SystemCoreClockUpdate+0xf8>)
 80002d6:	601a      	str	r2, [r3, #0]
      break;
 80002d8:	e039      	b.n	800034e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80002da:	4b27      	ldr	r3, [pc, #156]	; (8000378 <SystemCoreClockUpdate+0xec>)
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	0d9b      	lsrs	r3, r3, #22
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80002e6:	4b24      	ldr	r3, [pc, #144]	; (8000378 <SystemCoreClockUpdate+0xec>)
 80002e8:	685b      	ldr	r3, [r3, #4]
 80002ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002ee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d00c      	beq.n	8000310 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002f6:	4a23      	ldr	r2, [pc, #140]	; (8000384 <SystemCoreClockUpdate+0xf8>)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80002fe:	4a1e      	ldr	r2, [pc, #120]	; (8000378 <SystemCoreClockUpdate+0xec>)
 8000300:	6852      	ldr	r2, [r2, #4]
 8000302:	0992      	lsrs	r2, r2, #6
 8000304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000308:	fb02 f303 	mul.w	r3, r2, r3
 800030c:	617b      	str	r3, [r7, #20]
 800030e:	e00b      	b.n	8000328 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000310:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <SystemCoreClockUpdate+0xf4>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	fbb2 f3f3 	udiv	r3, r2, r3
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <SystemCoreClockUpdate+0xec>)
 800031a:	6852      	ldr	r2, [r2, #4]
 800031c:	0992      	lsrs	r2, r2, #6
 800031e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000322:	fb02 f303 	mul.w	r3, r2, r3
 8000326:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <SystemCoreClockUpdate+0xec>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	0c1b      	lsrs	r3, r3, #16
 800032e:	f003 0303 	and.w	r3, r3, #3
 8000332:	3301      	adds	r3, #1
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000338:	697a      	ldr	r2, [r7, #20]
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000340:	4a0e      	ldr	r2, [pc, #56]	; (800037c <SystemCoreClockUpdate+0xf0>)
 8000342:	6013      	str	r3, [r2, #0]
      break;
 8000344:	e003      	b.n	800034e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000346:	4b0d      	ldr	r3, [pc, #52]	; (800037c <SystemCoreClockUpdate+0xf0>)
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <SystemCoreClockUpdate+0xf4>)
 800034a:	601a      	str	r2, [r3, #0]
      break;
 800034c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <SystemCoreClockUpdate+0xec>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	091b      	lsrs	r3, r3, #4
 8000354:	f003 030f 	and.w	r3, r3, #15
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <SystemCoreClockUpdate+0xfc>)
 800035a:	5cd3      	ldrb	r3, [r2, r3]
 800035c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800035e:	4b07      	ldr	r3, [pc, #28]	; (800037c <SystemCoreClockUpdate+0xf0>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	fa22 f303 	lsr.w	r3, r2, r3
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <SystemCoreClockUpdate+0xf0>)
 800036a:	6013      	str	r3, [r2, #0]
}
 800036c:	bf00      	nop
 800036e:	371c      	adds	r7, #28
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40023800 	.word	0x40023800
 800037c:	20000000 	.word	0x20000000
 8000380:	00f42400 	.word	0x00f42400
 8000384:	007a1200 	.word	0x007a1200
 8000388:	08000440 	.word	0x08000440

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000390:	f7ff ff6a 	bl	8000268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	; (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 f811 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ff09 	bl	80001d4 <main>

080003c2 <LoopForever>:

LoopForever:
    b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d0:	08000458 	.word	0x08000458
  ldr r2, =_sbss
 80003d4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003d8:	20000020 	.word	0x20000020

080003dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC_IRQHandler>
	...

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	4d0d      	ldr	r5, [pc, #52]	; (8000418 <__libc_init_array+0x38>)
 80003e4:	4c0d      	ldr	r4, [pc, #52]	; (800041c <__libc_init_array+0x3c>)
 80003e6:	1b64      	subs	r4, r4, r5
 80003e8:	10a4      	asrs	r4, r4, #2
 80003ea:	2600      	movs	r6, #0
 80003ec:	42a6      	cmp	r6, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	4d0b      	ldr	r5, [pc, #44]	; (8000420 <__libc_init_array+0x40>)
 80003f2:	4c0c      	ldr	r4, [pc, #48]	; (8000424 <__libc_init_array+0x44>)
 80003f4:	f000 f818 	bl	8000428 <_init>
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	10a4      	asrs	r4, r4, #2
 80003fc:	2600      	movs	r6, #0
 80003fe:	42a6      	cmp	r6, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f855 3b04 	ldr.w	r3, [r5], #4
 8000408:	4798      	blx	r3
 800040a:	3601      	adds	r6, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	4798      	blx	r3
 8000414:	3601      	adds	r6, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000450 	.word	0x08000450
 800041c:	08000450 	.word	0x08000450
 8000420:	08000450 	.word	0x08000450
 8000424:	08000454 	.word	0x08000454

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr
