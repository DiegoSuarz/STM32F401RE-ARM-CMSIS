
05_EXTI_INTERRUPT_EXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  4 .ARM          00000000  0800042c  0800042c  00010434  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800042c  08000434  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000434  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000434  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ecf  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002e7  00000000  00000000  00011333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00011620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  000116b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd5c  00000000  00000000  00011728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000be7  00000000  00000000  0001f484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000500d5  00000000  00000000  0002006b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00070140  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  00070190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000414 	.word	0x08000414

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000414 	.word	0x08000414

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <main>:
 */
void GPIO_Init(void);
void EXTI_13_Init(void);

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	GPIO_Init();
 8000268:	f000 f804 	bl	8000274 <GPIO_Init>
	EXTI_13_Init();
 800026c:	f000 f824 	bl	80002b8 <EXTI_13_Init>
    /* Loop forever */
	for(;;);
 8000270:	e7fe      	b.n	8000270 <main+0xc>
	...

08000274 <GPIO_Init>:
}

void GPIO_Init(void){
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOX_CLOCK(BUTTON) | GPIOX_CLOCK(LED); //habilitando reloj para el pin A5 (pulsador) y pin C13 (led)
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <GPIO_Init+0x38>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <GPIO_Init+0x38>)
 800027e:	f043 0305 	orr.w	r3, r3, #5
 8000282:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOX_MODER(MODE_DIGITAL_INPUT,BUTTON); //PC13 entrada
 8000284:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <GPIO_Init+0x3c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <GPIO_Init+0x3c>)
 800028a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_OUT,LED); //PA5 salida
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <GPIO_Init+0x40>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <GPIO_Init+0x40>)
 800029a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800029e:	6013      	str	r3, [r2, #0]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020800 	.word	0x40020800
 80002b4:	40020000 	.word	0x40020000

080002b8 <EXTI_13_Init>:

void EXTI_13_Init(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;   //habilitar el reloj del sistem configuration
 80002bc:	4b13      	ldr	r3, [pc, #76]	; (800030c <EXTI_13_Init+0x54>)
 80002be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c0:	4a12      	ldr	r2, [pc, #72]	; (800030c <EXTI_13_Init+0x54>)
 80002c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c6:	6453      	str	r3, [r2, #68]	; 0x44

	//1- habilitar el bit de enmascaramiento
	EXTI->IMR |= EXTI_IMR_IM13;
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <EXTI_13_Init+0x58>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a10      	ldr	r2, [pc, #64]	; (8000310 <EXTI_13_Init+0x58>)
 80002ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002d2:	6013      	str	r3, [r2, #0]

	//2- Seleccionar el borde de disparo de la IT
	EXTI->FTSR |= EXTI_FTSR_TR13;
 80002d4:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <EXTI_13_Init+0x58>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <EXTI_13_Init+0x58>)
 80002da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002de:	60d3      	str	r3, [r2, #12]

	//3- Asignar el pin a la linea EXTI1
	SYSCFG->EXTICR[3] &= ~SYSCFG_EXTICR4_EXTI13; //clear
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <EXTI_13_Init+0x5c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <EXTI_13_Init+0x5c>)
 80002e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002ea:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC; //PC13
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <EXTI_13_Init+0x5c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <EXTI_13_Init+0x5c>)
 80002f2:	f043 0320 	orr.w	r3, r3, #32
 80002f6:	6153      	str	r3, [r2, #20]


//CONFIGURACION GLOBAL O CONFIGURACION EN LA NVIC (solo aparece en el manual de referencia de la familia)

	//PRIORIDAD
	NVIC_SetPriority(EXTI15_10_IRQn,3); //PRIORIDAD 3
 80002f8:	2103      	movs	r1, #3
 80002fa:	2028      	movs	r0, #40	; 0x28
 80002fc:	f7ff ff88 	bl	8000210 <__NVIC_SetPriority>

	//HABILITAR LA IT
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000300:	2028      	movs	r0, #40	; 0x28
 8000302:	f7ff ff67 	bl	80001d4 <__NVIC_EnableIRQ>

	return;
 8000306:	bf00      	nop
}
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	40013c00 	.word	0x40013c00
 8000314:	40013800 	.word	0x40013800

08000318 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void){ //ISR  EXTI 10-11-12-13-14-15 funcion rutina de interrupcion
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	 if(EXTI->PR & EXTI_PR_PR13){
 800031c:	4b0b      	ldr	r3, [pc, #44]	; (800034c <EXTI15_10_IRQHandler+0x34>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000324:	2b00      	cmp	r3, #0
 8000326:	d00b      	beq.n	8000340 <EXTI15_10_IRQHandler+0x28>
		 //CLEAR FLAG
		 EXTI->PR |= EXTI_PR_PR13;
 8000328:	4b08      	ldr	r3, [pc, #32]	; (800034c <EXTI15_10_IRQHandler+0x34>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a07      	ldr	r2, [pc, #28]	; (800034c <EXTI15_10_IRQHandler+0x34>)
 800032e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000332:	6153      	str	r3, [r2, #20]

		 GPIOX_ODR(LED) ^= 1; //cambiar el estado del pin led cada vez que se presiona el boton,(cuando se habilite una interrupcion)
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <EXTI15_10_IRQHandler+0x38>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a05      	ldr	r2, [pc, #20]	; (8000350 <EXTI15_10_IRQHandler+0x38>)
 800033a:	f083 0301 	eor.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]
	 }

}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40013c00 	.word	0x40013c00
 8000350:	42400294 	.word	0x42400294

08000354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <SystemInit+0x20>)
 800035a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <SystemInit+0x20>)
 8000360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f7ff ffea 	bl	8000354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ff5b 	bl	8000264 <main>

080003ae <LoopForever>:

LoopForever:
    b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c4:	2000001c 	.word	0x2000001c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
