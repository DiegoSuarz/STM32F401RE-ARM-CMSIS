
13_ADC_ScanMode_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000638  08000638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000648  08000648  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000648  08000648  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000648  08000648  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000648  08000648  00010648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800064c  0800064c  0001064c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000654  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000654  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001148  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044d  00000000  00000000  0002117c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  000215d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  000216a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ded7  00000000  00000000  00021738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000128b  00000000  00000000  0002f60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050259  00000000  00000000  0003089a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00080af3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001f8  00000000  00000000  00080b44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000620 	.word	0x08000620

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000620 	.word	0x08000620

080001d4 <delay_init>:
 * 		ValorDeRecarga = SysTickCounterClock x TemporizaciÃ³nDeseada(s)
 * 		ValorDeRecarga = 16000000 x 0.001
 * 		ValorDeRecarga = 16000
 */

void delay_init(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uint32_t temp;

	SysTick->CTRL = 0; //deshabilita la systick
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <delay_init+0x48>)
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
	SystemCoreClockUpdate(); //actualizo el valor del FOSC
 80001e0:	f000 f950 	bl	8000484 <SystemCoreClockUpdate>

#if(DELAY_MODE == 0)  //trabaja en us y ms
	temp = SystemCoreClock / 1000000UL;
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <delay_init+0x4c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <delay_init+0x50>)
 80001ea:	fba2 2303 	umull	r2, r3, r2, r3
 80001ee:	0c9b      	lsrs	r3, r3, #18
 80001f0:	607b      	str	r3, [r7, #4]

#else
#error "Eleccion incorrecta"
#endif

	SysTick ->LOAD = temp - 1; //Cargar el valor de RELOAD
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <delay_init+0x48>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3b01      	subs	r3, #1
 80001f8:	6053      	str	r3, [r2, #4]
	SysTick ->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //toma la fuente de relog SYSCLK
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <delay_init+0x48>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a07      	ldr	r2, [pc, #28]	; (800021c <delay_init+0x48>)
 8000200:	f043 0304 	orr.w	r3, r3, #4
 8000204:	6013      	str	r3, [r2, #0]
	SysTick ->CTRL |= SysTick_CTRL_ENABLE_Msk; //habilitar el conteo
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <delay_init+0x48>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a04      	ldr	r2, [pc, #16]	; (800021c <delay_init+0x48>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6013      	str	r3, [r2, #0]
	return;
 8000212:	bf00      	nop

}
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	e000e010 	.word	0xe000e010
 8000220:	20000000 	.word	0x20000000
 8000224:	431bde83 	.word	0x431bde83

08000228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	2b00      	cmp	r3, #0
 8000238:	db0b      	blt.n	8000252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	f003 021f 	and.w	r2, r3, #31
 8000240:	4907      	ldr	r1, [pc, #28]	; (8000260 <__NVIC_EnableIRQ+0x38>)
 8000242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000246:	095b      	lsrs	r3, r3, #5
 8000248:	2001      	movs	r0, #1
 800024a:	fa00 f202 	lsl.w	r2, r0, r2
 800024e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000252:	bf00      	nop
 8000254:	370c      	adds	r7, #12
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	e000e100 	.word	0xe000e100

08000264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	6039      	str	r1, [r7, #0]
 800026e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000274:	2b00      	cmp	r3, #0
 8000276:	db0a      	blt.n	800028e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	b2da      	uxtb	r2, r3
 800027c:	490c      	ldr	r1, [pc, #48]	; (80002b0 <__NVIC_SetPriority+0x4c>)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	0112      	lsls	r2, r2, #4
 8000284:	b2d2      	uxtb	r2, r2
 8000286:	440b      	add	r3, r1
 8000288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800028c:	e00a      	b.n	80002a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4908      	ldr	r1, [pc, #32]	; (80002b4 <__NVIC_SetPriority+0x50>)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f003 030f 	and.w	r3, r3, #15
 800029a:	3b04      	subs	r3, #4
 800029c:	0112      	lsls	r2, r2, #4
 800029e:	b2d2      	uxtb	r2, r2
 80002a0:	440b      	add	r3, r1
 80002a2:	761a      	strb	r2, [r3, #24]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	e000e100 	.word	0xe000e100
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <main>:
void ADC_ScanModeInit(void);
void ADC_ReadScanMode(void);
void ADC_ConfigInterrupt(void);

int main(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	delay_init();
 80002bc:	f7ff ff8a 	bl	80001d4 <delay_init>

	ADC_ScanModeInit();
 80002c0:	f000 f804 	bl	80002cc <ADC_ScanModeInit>
	ADC_ConfigInterrupt();
 80002c4:	f000 f874 	bl	80003b0 <ADC_ConfigInterrupt>

	for(;;){ //las conversiones se llevan a cabo en el ISR
 80002c8:	e7fe      	b.n	80002c8 <main+0x10>
	...

080002cc <ADC_ScanModeInit>:

	}
}

void ADC_ScanModeInit(void){
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	//Habilitar reloj del periferico conectado al bus APB2
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80002d0:	4b33      	ldr	r3, [pc, #204]	; (80003a0 <ADC_ScanModeInit+0xd4>)
 80002d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002d4:	4a32      	ldr	r2, [pc, #200]	; (80003a0 <ADC_ScanModeInit+0xd4>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002da:	6453      	str	r3, [r2, #68]	; 0x44

	//Configuracion del periferico:
	ADC1_COMMON->CCR &=~ADC_CCR_ADCPRE; //prescaler PLCK2/2 -> 16Mhz/2 = 8Mhz
 80002dc:	4b31      	ldr	r3, [pc, #196]	; (80003a4 <ADC_ScanModeInit+0xd8>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a30      	ldr	r2, [pc, #192]	; (80003a4 <ADC_ScanModeInit+0xd8>)
 80002e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80002e6:	6053      	str	r3, [r2, #4]
	ADC1->CR1 = 0; //limpiar registro de control 1
 80002e8:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0; //limpiar registro de control 2
 80002ee:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]

	//Configurar modo de trabajo: (auto, scan, single, etc...)
	ADC1->CR1 |= ADC_CR1_SCAN; //adc modo scan (multiples canales)
 80002f4:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a2b      	ldr	r2, [pc, #172]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 80002fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002fe:	6053      	str	r3, [r2, #4]

	ADC1->CR2 |= ADC_CR2_EOCS; //interrupcion cada vez que termine cada convesion regular
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 8000306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030a:	6093      	str	r3, [r2, #8]

	//Configurar la secuencia de las conversiones (modo scan)
	//numero de conversiones se desea:
	ADC1->SQR3 = (3-1)<<20; //realizar 3 conversiones
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 800030e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000312:	635a      	str	r2, [r3, #52]	; 0x34

	//orden de conversiones:
	ADC1->SQR3 |= 0<<10 | 1<<15 | 4<<0; //CH4->CH1->CH0
 8000314:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 8000316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000318:	4a23      	ldr	r2, [pc, #140]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 800031a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800031e:	f043 0304 	orr.w	r3, r3, #4
 8000322:	6353      	str	r3, [r2, #52]	; 0x34

	//sampling (frecuencia de muestreo)
	ADC1->SMPR2 = 0x3U;  //56 ciclos de reloj
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 8000326:	2203      	movs	r2, #3
 8000328:	611a      	str	r2, [r3, #16]
	ADC1->SMPR2 |= 0x5U<<12; //112 ciclos de reloj
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	4a1e      	ldr	r2, [pc, #120]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 8000330:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8000334:	6113      	str	r3, [r2, #16]

	//habilitar el ADC:
	ADC1->CR2 |= ADC_CR2_ADON; //enable ADC
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <ADC_ScanModeInit+0xdc>)
 800033c:	f043 0301 	orr.w	r3, r3, #1
 8000340:	6093      	str	r3, [r2, #8]

	/*
	 * Configuracion de canales del ADC modo Scan
	*/

	RCC->AHB1ENR |= GPIOX_CLOCK(ADC1_IN0) | GPIOX_CLOCK(ADC1_IN1) | GPIOX_CLOCK(ADC1_IN4); //habilitar reloj para los canales ADC
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <ADC_ScanModeInit+0xd4>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a16      	ldr	r2, [pc, #88]	; (80003a0 <ADC_ScanModeInit+0xd4>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6313      	str	r3, [r2, #48]	; 0x30

	//configurar canales (pines):

	//funcion Analogica de cada pin:
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN0);
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a16      	ldr	r2, [pc, #88]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000354:	f043 0303 	orr.w	r3, r3, #3
 8000358:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN1);
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <ADC_ScanModeInit+0xe0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a13      	ldr	r2, [pc, #76]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000360:	f043 030c 	orr.w	r3, r3, #12
 8000364:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN4);
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a10      	ldr	r2, [pc, #64]	; (80003ac <ADC_ScanModeInit+0xe0>)
 800036c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000370:	6013      	str	r3, [r2, #0]

	//Deshabilitar pull up/pull down:
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN0);
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000374:	68db      	ldr	r3, [r3, #12]
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000378:	f023 0303 	bic.w	r3, r3, #3
 800037c:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN1);
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000384:	f023 030c 	bic.w	r3, r3, #12
 8000388:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN4);
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <ADC_ScanModeInit+0xe0>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	4a07      	ldr	r2, [pc, #28]	; (80003ac <ADC_ScanModeInit+0xe0>)
 8000390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000394:	60d3      	str	r3, [r2, #12]

	return;
 8000396:	bf00      	nop

}
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40023800 	.word	0x40023800
 80003a4:	40012300 	.word	0x40012300
 80003a8:	40012000 	.word	0x40012000
 80003ac:	40020000 	.word	0x40020000

080003b0 <ADC_ConfigInterrupt>:
	while(!(ADC1->SR & ADC_SR_EOC)); //esperar a que termine la conversion
	adc_read[2]=ADC1->DR;    //leer el valor del canal
	delay_ms(100);
}

void ADC_ConfigInterrupt(void){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	ADC1->CR1 |= ADC_CR1_EOCIE; //habilitar interrupcion end of conversion
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <ADC_ConfigInterrupt+0x30>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <ADC_ConfigInterrupt+0x30>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= ADC_CR1_OVRIE; //habilitar interrupcion por sobreescritura del buffer del adc,
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <ADC_ConfigInterrupt+0x30>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <ADC_ConfigInterrupt+0x30>)
 80003c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ca:	6053      	str	r3, [r2, #4]
	NVIC_SetPriority(ADC_IRQn,3); //habilitar prioridad de interrupcion 3
 80003cc:	2103      	movs	r1, #3
 80003ce:	2012      	movs	r0, #18
 80003d0:	f7ff ff48 	bl	8000264 <__NVIC_SetPriority>
	NVIC_EnableIRQ(ADC_IRQn); 		//habilitar interrupcion ADC mediante NVIC
 80003d4:	2012      	movs	r0, #18
 80003d6:	f7ff ff27 	bl	8000228 <__NVIC_EnableIRQ>
	return;
 80003da:	bf00      	nop
}
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40012000 	.word	0x40012000

080003e4 <ADC_IRQHandler>:

/****************ISR**************************/
void ADC_IRQHandler(void){
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
	if(ADC1->SR & ADC_SR_EOC){ //el bit EOC (end of conversion) se puso en 1?
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <ADC_IRQHandler+0x70>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f003 0302 	and.w	r3, r3, #2
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d01d      	beq.n	8000430 <ADC_IRQHandler+0x4c>
		if(cont<3){
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <ADC_IRQHandler+0x74>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	d80f      	bhi.n	800041c <ADC_IRQHandler+0x38>
			adc_read[cont] = ADC1->DR; //leer el buffer del ADC
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <ADC_IRQHandler+0x70>)
 80003fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <ADC_IRQHandler+0x74>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	461a      	mov	r2, r3
 8000406:	b289      	uxth	r1, r1
 8000408:	4b14      	ldr	r3, [pc, #80]	; (800045c <ADC_IRQHandler+0x78>)
 800040a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			cont++;
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <ADC_IRQHandler+0x74>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	b2da      	uxtb	r2, r3
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <ADC_IRQHandler+0x74>)
 8000418:	701a      	strb	r2, [r3, #0]
		}
	}
	else if(ADC1->SR & ADC_SR_OVR){ //ha ocurrido una sobreescritura del buffer del ADC (se sobreescribio el buffer antes de leer el valor convertido)
		ADC1->SR &=~ ADC_SR_OVR; //limpiando bandera de sobreescritura por software
	}
}
 800041a:	e015      	b.n	8000448 <ADC_IRQHandler+0x64>
			cont=0;
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <ADC_IRQHandler+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
			ADC1->CR1 |= ADC_CR2_SWSTART;  //disparo por software
 8000422:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <ADC_IRQHandler+0x70>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <ADC_IRQHandler+0x70>)
 8000428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800042c:	6053      	str	r3, [r2, #4]
}
 800042e:	e00b      	b.n	8000448 <ADC_IRQHandler+0x64>
	else if(ADC1->SR & ADC_SR_OVR){ //ha ocurrido una sobreescritura del buffer del ADC (se sobreescribio el buffer antes de leer el valor convertido)
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <ADC_IRQHandler+0x70>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	2b00      	cmp	r3, #0
 800043a:	d005      	beq.n	8000448 <ADC_IRQHandler+0x64>
		ADC1->SR &=~ ADC_SR_OVR; //limpiando bandera de sobreescritura por software
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <ADC_IRQHandler+0x70>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <ADC_IRQHandler+0x70>)
 8000442:	f023 0320 	bic.w	r3, r3, #32
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40012000 	.word	0x40012000
 8000458:	20000024 	.word	0x20000024
 800045c:	20000020 	.word	0x20000020

08000460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <SystemInit+0x20>)
 8000466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800046a:	4a05      	ldr	r2, [pc, #20]	; (8000480 <SystemInit+0x20>)
 800046c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e000ed00 	.word	0xe000ed00

08000484 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b087      	sub	sp, #28
 8000488:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800048a:	2300      	movs	r3, #0
 800048c:	613b      	str	r3, [r7, #16]
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	2302      	movs	r3, #2
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	2300      	movs	r3, #0
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	2302      	movs	r3, #2
 800049c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800049e:	4b34      	ldr	r3, [pc, #208]	; (8000570 <SystemCoreClockUpdate+0xec>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	f003 030c 	and.w	r3, r3, #12
 80004a6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	2b08      	cmp	r3, #8
 80004ac:	d011      	beq.n	80004d2 <SystemCoreClockUpdate+0x4e>
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	2b08      	cmp	r3, #8
 80004b2:	d844      	bhi.n	800053e <SystemCoreClockUpdate+0xba>
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d003      	beq.n	80004c2 <SystemCoreClockUpdate+0x3e>
 80004ba:	693b      	ldr	r3, [r7, #16]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d004      	beq.n	80004ca <SystemCoreClockUpdate+0x46>
 80004c0:	e03d      	b.n	800053e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80004c2:	4b2c      	ldr	r3, [pc, #176]	; (8000574 <SystemCoreClockUpdate+0xf0>)
 80004c4:	4a2c      	ldr	r2, [pc, #176]	; (8000578 <SystemCoreClockUpdate+0xf4>)
 80004c6:	601a      	str	r2, [r3, #0]
      break;
 80004c8:	e03d      	b.n	8000546 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80004ca:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <SystemCoreClockUpdate+0xf0>)
 80004cc:	4a2b      	ldr	r2, [pc, #172]	; (800057c <SystemCoreClockUpdate+0xf8>)
 80004ce:	601a      	str	r2, [r3, #0]
      break;
 80004d0:	e039      	b.n	8000546 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80004d2:	4b27      	ldr	r3, [pc, #156]	; (8000570 <SystemCoreClockUpdate+0xec>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	0d9b      	lsrs	r3, r3, #22
 80004d8:	f003 0301 	and.w	r3, r3, #1
 80004dc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80004de:	4b24      	ldr	r3, [pc, #144]	; (8000570 <SystemCoreClockUpdate+0xec>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004e6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d00c      	beq.n	8000508 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80004ee:	4a23      	ldr	r2, [pc, #140]	; (800057c <SystemCoreClockUpdate+0xf8>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004f6:	4a1e      	ldr	r2, [pc, #120]	; (8000570 <SystemCoreClockUpdate+0xec>)
 80004f8:	6852      	ldr	r2, [r2, #4]
 80004fa:	0992      	lsrs	r2, r2, #6
 80004fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000500:	fb02 f303 	mul.w	r3, r2, r3
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	e00b      	b.n	8000520 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <SystemCoreClockUpdate+0xf4>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <SystemCoreClockUpdate+0xec>)
 8000512:	6852      	ldr	r2, [r2, #4]
 8000514:	0992      	lsrs	r2, r2, #6
 8000516:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <SystemCoreClockUpdate+0xec>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	0c1b      	lsrs	r3, r3, #16
 8000526:	f003 0303 	and.w	r3, r3, #3
 800052a:	3301      	adds	r3, #1
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	fbb2 f3f3 	udiv	r3, r2, r3
 8000538:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <SystemCoreClockUpdate+0xf0>)
 800053a:	6013      	str	r3, [r2, #0]
      break;
 800053c:	e003      	b.n	8000546 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <SystemCoreClockUpdate+0xf0>)
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <SystemCoreClockUpdate+0xf4>)
 8000542:	601a      	str	r2, [r3, #0]
      break;
 8000544:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <SystemCoreClockUpdate+0xec>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	091b      	lsrs	r3, r3, #4
 800054c:	f003 030f 	and.w	r3, r3, #15
 8000550:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <SystemCoreClockUpdate+0xfc>)
 8000552:	5cd3      	ldrb	r3, [r2, r3]
 8000554:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <SystemCoreClockUpdate+0xf0>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	fa22 f303 	lsr.w	r3, r2, r3
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <SystemCoreClockUpdate+0xf0>)
 8000562:	6013      	str	r3, [r2, #0]
}
 8000564:	bf00      	nop
 8000566:	371c      	adds	r7, #28
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	40023800 	.word	0x40023800
 8000574:	20000000 	.word	0x20000000
 8000578:	00f42400 	.word	0x00f42400
 800057c:	007a1200 	.word	0x007a1200
 8000580:	08000638 	.word	0x08000638

08000584 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000586:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000588:	f7ff ff6a 	bl	8000460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800058e:	490d      	ldr	r1, [pc, #52]	; (80005c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000590:	4a0d      	ldr	r2, [pc, #52]	; (80005c8 <LoopForever+0xe>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a4:	4c0a      	ldr	r4, [pc, #40]	; (80005d0 <LoopForever+0x16>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b2:	f000 f811 	bl	80005d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b6:	f7ff fe7f 	bl	80002b8 <main>

080005ba <LoopForever>:

LoopForever:
    b LoopForever
 80005ba:	e7fe      	b.n	80005ba <LoopForever>
  ldr   r0, =_estack
 80005bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005c8:	08000650 	.word	0x08000650
  ldr r2, =_sbss
 80005cc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005d0:	20000028 	.word	0x20000028

080005d4 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <BusFault_Handler>
	...

080005d8 <__libc_init_array>:
 80005d8:	b570      	push	{r4, r5, r6, lr}
 80005da:	4d0d      	ldr	r5, [pc, #52]	; (8000610 <__libc_init_array+0x38>)
 80005dc:	4c0d      	ldr	r4, [pc, #52]	; (8000614 <__libc_init_array+0x3c>)
 80005de:	1b64      	subs	r4, r4, r5
 80005e0:	10a4      	asrs	r4, r4, #2
 80005e2:	2600      	movs	r6, #0
 80005e4:	42a6      	cmp	r6, r4
 80005e6:	d109      	bne.n	80005fc <__libc_init_array+0x24>
 80005e8:	4d0b      	ldr	r5, [pc, #44]	; (8000618 <__libc_init_array+0x40>)
 80005ea:	4c0c      	ldr	r4, [pc, #48]	; (800061c <__libc_init_array+0x44>)
 80005ec:	f000 f818 	bl	8000620 <_init>
 80005f0:	1b64      	subs	r4, r4, r5
 80005f2:	10a4      	asrs	r4, r4, #2
 80005f4:	2600      	movs	r6, #0
 80005f6:	42a6      	cmp	r6, r4
 80005f8:	d105      	bne.n	8000606 <__libc_init_array+0x2e>
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000600:	4798      	blx	r3
 8000602:	3601      	adds	r6, #1
 8000604:	e7ee      	b.n	80005e4 <__libc_init_array+0xc>
 8000606:	f855 3b04 	ldr.w	r3, [r5], #4
 800060a:	4798      	blx	r3
 800060c:	3601      	adds	r6, #1
 800060e:	e7f2      	b.n	80005f6 <__libc_init_array+0x1e>
 8000610:	08000648 	.word	0x08000648
 8000614:	08000648 	.word	0x08000648
 8000618:	08000648 	.word	0x08000648
 800061c:	0800064c 	.word	0x0800064c

08000620 <_init>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr

0800062c <_fini>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr
