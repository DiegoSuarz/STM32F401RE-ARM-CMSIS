/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "USART_LIB.h"
#include "defines_pines.h"

#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#define USE_SWV			0

#define USART2_TX		A, 2
#define USART2_RX		A, 3

uint8_t txbuffer[50];
uint8_t rxbuffer[50];

uint16_t i=0;

void USART2_GPIO_Init(void);

int main(void)
{
    USART2_GPIO_Init();
    USART_Init(USART2, 16E+6, 115200, 0);

    //habilitar interrupcion
    //parte local del periferico
    //USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_RXNEIE; //habilitar interrupcion por transmision y recepcion

    //Parte NVIC (arquitectura ARM)
    NVIC_EnableIRQ(USART2_IRQn); //habilitar interrupciones de usart2

    sprintf((char*)txbuffer,"hola mundo IT");

    USART2 -> CR1 |= USART_CR1_TXEIE;
	/* Loop forever */
	for(;;);
}

void USART2_GPIO_Init(void){
	RCC -> AHB1ENR |= GPIOX_CLOCK(USART2_TX);
	//PA2 -> TX
	GPIOX_MODER(MODE_ALTER, USART2_TX);   	//pin PA2 modo funcion alternativa
	GPIOX_OSPEEDR(MODE_SPD_VHIGH,USART2_TX); //pin alta velocidad
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2); //Limpiar los bits de funcion alternativa
	GPIOA->AFR[0] |= (0x7U << 8U); //PA2 modo funcion alternativa para usarlo como USART2_TX (ver datasheet)
	//GPIOA->MODER |= 0x7U << 8; //PA2 modo funcion alternativa para usarlo como USART2_TX (ver datasheet)

	//PA3 -> RX
	GPIOX_MODER(MODE_ALTER, USART2_RX);   	//pin PA2 modo funcion alternativa
	GPIOX_OSPEEDR(MODE_SPD_VHIGH,USART2_RX); //pin alta velocidad
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL3); //Limpiar los bits de funcion alternativa
	GPIOA->AFR[0] |= (0x7U << 12U); //PA2 modo funcion alternativa para usarlo como USART2_RX (ver datasheet)
	//GPIOX_AFR(7U,USART2_RX);

}


/***************ISR****************************/

void USART2_IRQHandler(void){
	if(USART2->SR & USART_SR_TXE){
		if(i<10){
			USART2->DR = txbuffer[i]; //enviando un byte del buffer tx
			i++;
		}else{
			i=0;
			USART2->CR1 &= ~ USART_CR1_TXEIE; //desactiva las interrupcion de tx Usart2
		}
	}else if(USART2->SR & USART_SR_RXNE){

	}
}

