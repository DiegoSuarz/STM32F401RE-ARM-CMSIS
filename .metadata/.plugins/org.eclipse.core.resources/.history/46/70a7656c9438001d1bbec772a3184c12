/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stm32f4xx.h>
#include "defines_pines.h"
#include "delay.h"

uint16_t adcRead;

//Pines Analogicos:
#define ADC1_IN0	A,0
#define ADC1_IN1	A,1
#define ADC1_IN4	A,4
#define ADC1_IN8	B,0
#define ADC1_IN10	C,0
#define ADC1_IN11	C,1

#define ADC_CH0		0
#define ADC_CH1		1
#define ADC_CH2		2
#define ADC_CH3		3
#define ADC_CH4		4
#define ADC_CH5		5
#define ADC_CH6		6
#define ADC_CH7		7
#define ADC_CH8		8
#define ADC_CH9		9
#define ADC_CH10	10
#define ADC_CH11	11
#define ADC_CH12	12
#define ADC_CH13	13
#define ADC_CH14	14
#define ADC_CH15	15


void ADC_SingleModeInit(void);
uint16_t ADC_ReadSingleMode(uint8_t channel);

int main(void)
{
	delay_init();

	ADC_SingleModeInit();

	for(;;){

		adcRead = ADC_ReadSingleMode(ADC_CH0); //leer el adc canal 0
		delay_ms(100);
	}
}

void ADC_SingleModeInit(void){ //configuracion para el canal 1:

	/*********Habilitar canales*****************/
	GPIO_CLOCK_ENABLE(A); //habilitar reloj para el puerto A

	//configurar canales:
	//funcion Analogica de cada pin:
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN0);
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN1);
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN4);

	//Deshabilitar pull up/pull down:
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN0);
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN1);
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN4);

	//tiempo de muestreo:
	ADC1->SMPR2 |= ADC_SMPR2_SMP4_1; //28 ciclos de muestreo

	/*********************************************/
	//habilitar el reloj:
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;

	//configurar parametros del adc:
	ADC1_COMMON->CCR &=~ADC_CCR_ADCPRE; //	PLCK2/2 = 16Mhz/2 = 8Mhz

	ADC1->CR1 = 0; //limpiar registro de control 1
	ADC1->CR2 = 0; //limpiar registro de control 2

	/*Configurar Triger Externo*/
	ADC1->CR2 |= ADC_CR2_EXTEN_0; //disparo externo por flanco ascendente
	ADC1->CR2 |= 0x6U<<ADC_CR2_EXTSEL_Pos; //trigger Timer2 event

	//habilitar ADC
	ADC1->CR2 |= ADC_CR2_ADON; //encender ADC

	return;

}

uint16_t ADC_ReadSingleMode(uint8_t channel){
	ADC1->SQR1 &=~ADC_SQR1_L; //una sola conversion por disparo (single mode)
	ADC1->SQR3 &=~ADC_SQR3_SQ1;
	ADC1->SQR3 |= channel; //canal a convertir
	 //trigger (fuente de disparo)
	ADC1->CR2 |= ADC_CR2_SWSTART; //fuente de disparo por software, inicia la conversion
	while(!(ADC1->SR & ADC_SR_EOC)); //esperar a que la conversion termine

	return ADC1->DR; //retornar el valor convertido
}



