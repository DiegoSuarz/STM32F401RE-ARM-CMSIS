
04_SYSTICK_TIMER_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004d4  080004d4  000104d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e4  080004e4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e4  080004e4  000104e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004e8  080004e8  000104e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004f0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004f0  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a81  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000037f  00000000  00000000  00020ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00020e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de53  00000000  00000000  00020f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000111b  00000000  00000000  0002edb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fd36  00000000  00000000  0002fece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007fc04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000164  00000000  00000000  0007fc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004bc 	.word	0x080004bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004bc 	.word	0x080004bc

080001d4 <delay_init_interrupt>:
#include "delay.h"


volatile uint32_t uwTick = 0; //esta variable puede cambiar tanto por software y por hardware

void delay_init_interrupt(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uint32_t temp;

	SysTick->CTRL = 0; //deshabilita la systick
 80001da:	4b13      	ldr	r3, [pc, #76]	; (8000228 <delay_init_interrupt+0x54>)
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
	SystemCoreClockUpdate(); //actualizo el valor del FOSC
 80001e0:	f000 f89e 	bl	8000320 <SystemCoreClockUpdate>
	temp=SystemCoreClock/1000UL;
 80001e4:	4b11      	ldr	r3, [pc, #68]	; (800022c <delay_init_interrupt+0x58>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <delay_init_interrupt+0x5c>)
 80001ea:	fba2 2303 	umull	r2, r3, r2, r3
 80001ee:	099b      	lsrs	r3, r3, #6
 80001f0:	607b      	str	r3, [r7, #4]
	SysTick ->LOAD = temp - 1; //Cargar el valor de RELOAD
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <delay_init_interrupt+0x54>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3b01      	subs	r3, #1
 80001f8:	6053      	str	r3, [r2, #4]
	SysTick ->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //toma la fuente de relog SYSCLK
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <delay_init_interrupt+0x54>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0a      	ldr	r2, [pc, #40]	; (8000228 <delay_init_interrupt+0x54>)
 8000200:	f043 0304 	orr.w	r3, r3, #4
 8000204:	6013      	str	r3, [r2, #0]


	//habilitar la interrupcion de systick
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; //habilitar interrupcion systick
 8000206:	4b08      	ldr	r3, [pc, #32]	; (8000228 <delay_init_interrupt+0x54>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a07      	ldr	r2, [pc, #28]	; (8000228 <delay_init_interrupt+0x54>)
 800020c:	f043 0302 	orr.w	r3, r3, #2
 8000210:	6013      	str	r3, [r2, #0]

	SysTick ->CTRL |= SysTick_CTRL_ENABLE_Msk; //habilitar el conteo
 8000212:	4b05      	ldr	r3, [pc, #20]	; (8000228 <delay_init_interrupt+0x54>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a04      	ldr	r2, [pc, #16]	; (8000228 <delay_init_interrupt+0x54>)
 8000218:	f043 0301 	orr.w	r3, r3, #1
 800021c:	6013      	str	r3, [r2, #0]
	return;
 800021e:	bf00      	nop

}
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	e000e010 	.word	0xe000e010
 800022c:	20000000 	.word	0x20000000
 8000230:	10624dd3 	.word	0x10624dd3

08000234 <GetTick>:

static uint32_t GetTick(void){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	return uwTick;
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <GetTick+0x14>)
 800023a:	681b      	ldr	r3, [r3, #0]
}
 800023c:	4618      	mov	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	20000020 	.word	0x20000020

0800024c <millis>:
	return;
}


/*brief funcion similar al milis en arduino*/
uint32_t millis(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	return GetTick();
 8000250:	f7ff fff0 	bl	8000234 <GetTick>
 8000254:	4603      	mov	r3, r0
}
 8000256:	4618      	mov	r0, r3
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <main>:

uint32_t time;

void config_port(void);
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	config_port();
 8000260:	f000 f820 	bl	80002a4 <config_port>
	delay_init_interrupt();
 8000264:	f7ff ffb6 	bl	80001d4 <delay_init_interrupt>
	time = millis();
 8000268:	f7ff fff0 	bl	800024c <millis>
 800026c:	4603      	mov	r3, r0
 800026e:	4a0b      	ldr	r2, [pc, #44]	; (800029c <main+0x40>)
 8000270:	6013      	str	r3, [r2, #0]
	for(;;){

		//GPIOX_ODR(LED) ^= 1;
		//delay_ms(100);

		if ((millis() - time) > 100){
 8000272:	f7ff ffeb 	bl	800024c <millis>
 8000276:	4602      	mov	r2, r0
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <main+0x40>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	2b64      	cmp	r3, #100	; 0x64
 8000280:	d9f7      	bls.n	8000272 <main+0x16>
			time = millis();
 8000282:	f7ff ffe3 	bl	800024c <millis>
 8000286:	4603      	mov	r3, r0
 8000288:	4a04      	ldr	r2, [pc, #16]	; (800029c <main+0x40>)
 800028a:	6013      	str	r3, [r2, #0]
			GPIOX_ODR(LED) ^= 1;
 800028c:	4b04      	ldr	r3, [pc, #16]	; (80002a0 <main+0x44>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a03      	ldr	r2, [pc, #12]	; (80002a0 <main+0x44>)
 8000292:	f083 0301 	eor.w	r3, r3, #1
 8000296:	6013      	str	r3, [r2, #0]
		if ((millis() - time) > 100){
 8000298:	e7eb      	b.n	8000272 <main+0x16>
 800029a:	bf00      	nop
 800029c:	20000024 	.word	0x20000024
 80002a0:	42400294 	.word	0x42400294

080002a4 <config_port>:
		}
	}
}

void config_port(void){
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOX_CLOCK(LED);
 80002a8:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <config_port+0x50>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <config_port+0x50>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT,LED);
 80002b4:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <config_port+0x54>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <config_port+0x54>)
 80002be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002c2:	6013      	str	r3, [r2, #0]
	GPIOX_OTYPER(MODE_OT_PP,LED);
 80002c4:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <config_port+0x54>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <config_port+0x54>)
 80002ca:	f023 0320 	bic.w	r3, r3, #32
 80002ce:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH,LED);
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <config_port+0x54>)
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <config_port+0x54>)
 80002d6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80002da:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_NONE,LED);
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <config_port+0x54>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a05      	ldr	r2, [pc, #20]	; (80002f8 <config_port+0x54>)
 80002e2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002e6:	60d3      	str	r3, [r2, #12]

	}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40020000 	.word	0x40020000

080002fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <SystemInit+0x20>)
 8000302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000306:	4a05      	ldr	r2, [pc, #20]	; (800031c <SystemInit+0x20>)
 8000308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800030c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000326:	2300      	movs	r3, #0
 8000328:	613b      	str	r3, [r7, #16]
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]
 800032e:	2302      	movs	r3, #2
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	2302      	movs	r3, #2
 8000338:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800033a:	4b34      	ldr	r3, [pc, #208]	; (800040c <SystemCoreClockUpdate+0xec>)
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	f003 030c 	and.w	r3, r3, #12
 8000342:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000344:	693b      	ldr	r3, [r7, #16]
 8000346:	2b08      	cmp	r3, #8
 8000348:	d011      	beq.n	800036e <SystemCoreClockUpdate+0x4e>
 800034a:	693b      	ldr	r3, [r7, #16]
 800034c:	2b08      	cmp	r3, #8
 800034e:	d844      	bhi.n	80003da <SystemCoreClockUpdate+0xba>
 8000350:	693b      	ldr	r3, [r7, #16]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d003      	beq.n	800035e <SystemCoreClockUpdate+0x3e>
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	2b04      	cmp	r3, #4
 800035a:	d004      	beq.n	8000366 <SystemCoreClockUpdate+0x46>
 800035c:	e03d      	b.n	80003da <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800035e:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <SystemCoreClockUpdate+0xf0>)
 8000360:	4a2c      	ldr	r2, [pc, #176]	; (8000414 <SystemCoreClockUpdate+0xf4>)
 8000362:	601a      	str	r2, [r3, #0]
      break;
 8000364:	e03d      	b.n	80003e2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000366:	4b2a      	ldr	r3, [pc, #168]	; (8000410 <SystemCoreClockUpdate+0xf0>)
 8000368:	4a2b      	ldr	r2, [pc, #172]	; (8000418 <SystemCoreClockUpdate+0xf8>)
 800036a:	601a      	str	r2, [r3, #0]
      break;
 800036c:	e039      	b.n	80003e2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800036e:	4b27      	ldr	r3, [pc, #156]	; (800040c <SystemCoreClockUpdate+0xec>)
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	0d9b      	lsrs	r3, r3, #22
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800037a:	4b24      	ldr	r3, [pc, #144]	; (800040c <SystemCoreClockUpdate+0xec>)
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000382:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d00c      	beq.n	80003a4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800038a:	4a23      	ldr	r2, [pc, #140]	; (8000418 <SystemCoreClockUpdate+0xf8>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000392:	4a1e      	ldr	r2, [pc, #120]	; (800040c <SystemCoreClockUpdate+0xec>)
 8000394:	6852      	ldr	r2, [r2, #4]
 8000396:	0992      	lsrs	r2, r2, #6
 8000398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	617b      	str	r3, [r7, #20]
 80003a2:	e00b      	b.n	80003bc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003a4:	4a1b      	ldr	r2, [pc, #108]	; (8000414 <SystemCoreClockUpdate+0xf4>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ac:	4a17      	ldr	r2, [pc, #92]	; (800040c <SystemCoreClockUpdate+0xec>)
 80003ae:	6852      	ldr	r2, [r2, #4]
 80003b0:	0992      	lsrs	r2, r2, #6
 80003b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80003b6:	fb02 f303 	mul.w	r3, r2, r3
 80003ba:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <SystemCoreClockUpdate+0xec>)
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	0c1b      	lsrs	r3, r3, #16
 80003c2:	f003 0303 	and.w	r3, r3, #3
 80003c6:	3301      	adds	r3, #1
 80003c8:	005b      	lsls	r3, r3, #1
 80003ca:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80003cc:	697a      	ldr	r2, [r7, #20]
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <SystemCoreClockUpdate+0xf0>)
 80003d6:	6013      	str	r3, [r2, #0]
      break;
 80003d8:	e003      	b.n	80003e2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <SystemCoreClockUpdate+0xf0>)
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <SystemCoreClockUpdate+0xf4>)
 80003de:	601a      	str	r2, [r3, #0]
      break;
 80003e0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <SystemCoreClockUpdate+0xec>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	091b      	lsrs	r3, r3, #4
 80003e8:	f003 030f 	and.w	r3, r3, #15
 80003ec:	4a0b      	ldr	r2, [pc, #44]	; (800041c <SystemCoreClockUpdate+0xfc>)
 80003ee:	5cd3      	ldrb	r3, [r2, r3]
 80003f0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003f2:	4b07      	ldr	r3, [pc, #28]	; (8000410 <SystemCoreClockUpdate+0xf0>)
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	fa22 f303 	lsr.w	r3, r2, r3
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <SystemCoreClockUpdate+0xf0>)
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	371c      	adds	r7, #28
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40023800 	.word	0x40023800
 8000410:	20000000 	.word	0x20000000
 8000414:	00f42400 	.word	0x00f42400
 8000418:	007a1200 	.word	0x007a1200
 800041c:	080004d4 	.word	0x080004d4

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000424:	f7ff ff6a 	bl	80002fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f000 f811 	bl	8000474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000452:	f7ff ff03 	bl	800025c <main>

08000456 <LoopForever>:

LoopForever:
    b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000464:	080004ec 	.word	0x080004ec
  ldr r2, =_sbss
 8000468:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800046c:	20000028 	.word	0x20000028

08000470 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC_IRQHandler>
	...

08000474 <__libc_init_array>:
 8000474:	b570      	push	{r4, r5, r6, lr}
 8000476:	4d0d      	ldr	r5, [pc, #52]	; (80004ac <__libc_init_array+0x38>)
 8000478:	4c0d      	ldr	r4, [pc, #52]	; (80004b0 <__libc_init_array+0x3c>)
 800047a:	1b64      	subs	r4, r4, r5
 800047c:	10a4      	asrs	r4, r4, #2
 800047e:	2600      	movs	r6, #0
 8000480:	42a6      	cmp	r6, r4
 8000482:	d109      	bne.n	8000498 <__libc_init_array+0x24>
 8000484:	4d0b      	ldr	r5, [pc, #44]	; (80004b4 <__libc_init_array+0x40>)
 8000486:	4c0c      	ldr	r4, [pc, #48]	; (80004b8 <__libc_init_array+0x44>)
 8000488:	f000 f818 	bl	80004bc <_init>
 800048c:	1b64      	subs	r4, r4, r5
 800048e:	10a4      	asrs	r4, r4, #2
 8000490:	2600      	movs	r6, #0
 8000492:	42a6      	cmp	r6, r4
 8000494:	d105      	bne.n	80004a2 <__libc_init_array+0x2e>
 8000496:	bd70      	pop	{r4, r5, r6, pc}
 8000498:	f855 3b04 	ldr.w	r3, [r5], #4
 800049c:	4798      	blx	r3
 800049e:	3601      	adds	r6, #1
 80004a0:	e7ee      	b.n	8000480 <__libc_init_array+0xc>
 80004a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004a6:	4798      	blx	r3
 80004a8:	3601      	adds	r6, #1
 80004aa:	e7f2      	b.n	8000492 <__libc_init_array+0x1e>
 80004ac:	080004e4 	.word	0x080004e4
 80004b0:	080004e4 	.word	0x080004e4
 80004b4:	080004e4 	.word	0x080004e4
 80004b8:	080004e8 	.word	0x080004e8

080004bc <_init>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr

080004c8 <_fini>:
 80004c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ca:	bf00      	nop
 80004cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ce:	bc08      	pop	{r3}
 80004d0:	469e      	mov	lr, r3
 80004d2:	4770      	bx	lr
