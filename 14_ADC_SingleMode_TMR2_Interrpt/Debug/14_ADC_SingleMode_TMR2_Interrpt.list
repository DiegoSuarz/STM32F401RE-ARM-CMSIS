
14_ADC_SingleMode_TMR2_Interrpt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c20  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000db8  08000db8  00010db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dc8  08000dc8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc8  08000dc8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc8  08000dc8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc8  08000dc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000dd4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000dd4  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001073  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000044e  00000000  00000000  000210a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000214f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  000215b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ded7  00000000  00000000  00021640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011eb  00000000  00000000  0002f517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00050286  00000000  00000000  00030702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00080988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002d8  00000000  00000000  000809d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000004 	.word	0x20000004
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000da0 	.word	0x08000da0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000008 	.word	0x20000008
 80001d4:	08000da0 	.word	0x08000da0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <delay_init>:
 * 		ValorDeRecarga = SysTickCounterClock x TemporizaciónDeseada(s)
 * 		ValorDeRecarga = 16000000 x 0.001
 * 		ValorDeRecarga = 16000
 */

void delay_init(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	uint32_t temp;

	SysTick->CTRL = 0; //deshabilita la systick
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <delay_init+0x48>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
	SystemCoreClockUpdate(); //actualizo el valor del FOSC
 80009c0:	f000 f920 	bl	8000c04 <SystemCoreClockUpdate>

#if(DELAY_MODE == 0)  //trabaja en us y ms
	temp = SystemCoreClock / 1000000UL;
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <delay_init+0x4c>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <delay_init+0x50>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9b      	lsrs	r3, r3, #18
 80009d0:	607b      	str	r3, [r7, #4]

#else
#error "Eleccion incorrecta"
#endif

	SysTick ->LOAD = temp - 1; //Cargar el valor de RELOAD
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <delay_init+0x48>)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	6053      	str	r3, [r2, #4]
	SysTick ->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //toma la fuente de relog SYSCLK
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <delay_init+0x48>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a07      	ldr	r2, [pc, #28]	; (80009fc <delay_init+0x48>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6013      	str	r3, [r2, #0]
	SysTick ->CTRL |= SysTick_CTRL_ENABLE_Msk; //habilitar el conteo
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <delay_init+0x48>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a04      	ldr	r2, [pc, #16]	; (80009fc <delay_init+0x48>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6013      	str	r3, [r2, #0]
	return;
 80009f2:	bf00      	nop

}
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	e000e010 	.word	0xe000e010
 8000a00:	20000000 	.word	0x20000000
 8000a04:	431bde83 	.word	0x431bde83

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <__NVIC_EnableIRQ+0x38>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <main>:
void ADC_SingleModeInit(void);

void TMR2_init(uint32_t freq);

int main(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	delay_init();
 8000a48:	f7ff ffb4 	bl	80009b4 <delay_init>

	ADC_SingleModeInit();
 8000a4c:	f000 f804 	bl	8000a58 <ADC_SingleModeInit>
	TMR2_init(5); //frecuencia de 5hz
 8000a50:	2005      	movs	r0, #5
 8000a52:	f000 f86d 	bl	8000b30 <TMR2_init>

	for(;;){
 8000a56:	e7fe      	b.n	8000a56 <main+0x12>

08000a58 <ADC_SingleModeInit>:

	}
}

void ADC_SingleModeInit(void){ //configuracion para el canal 1:
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

	/*********Habilitar canales*****************/
	GPIO_CLOCK_ENABLE(A); //habilitar reloj para el puerto A
 8000a5c:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <ADC_SingleModeInit+0xc4>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a60:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <ADC_SingleModeInit+0xc4>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	6313      	str	r3, [r2, #48]	; 0x30

	//configurar canales:
	//funcion Analogica de cada pin:
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN0);
 8000a68:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a2c      	ldr	r2, [pc, #176]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a6e:	f043 0303 	orr.w	r3, r3, #3
 8000a72:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN1);
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a29      	ldr	r2, [pc, #164]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a7a:	f043 030c 	orr.w	r3, r3, #12
 8000a7e:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ANALOG_INPUT, ADC1_IN4);
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a86:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000a8a:	6013      	str	r3, [r2, #0]

	//Deshabilitar pull up/pull down:
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN0);
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a92:	f023 0303 	bic.w	r3, r3, #3
 8000a96:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN1);
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	4a20      	ldr	r2, [pc, #128]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000a9e:	f023 030c 	bic.w	r3, r3, #12
 8000aa2:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_NONE, ADC1_IN4);
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <ADC_SingleModeInit+0xc8>)
 8000aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000aae:	60d3      	str	r3, [r2, #12]

	//tiempo de muestreo:
	ADC1->SMPR2 |= ADC_SMPR2_SMP4_1; //28 ciclos de muestreo
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000ab6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aba:	6113      	str	r3, [r2, #16]

	/*********************************************/
	//habilitar el reloj:
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <ADC_SingleModeInit+0xc4>)
 8000abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <ADC_SingleModeInit+0xc4>)
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac6:	6453      	str	r3, [r2, #68]	; 0x44

	//configurar parametros del adc:
	ADC1_COMMON->CCR &=~ADC_CCR_ADCPRE; //	PLCK2/2 = 16Mhz/2 = 8Mhz
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <ADC_SingleModeInit+0xd0>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <ADC_SingleModeInit+0xd0>)
 8000ace:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ad2:	6053      	str	r3, [r2, #4]

	ADC1->CR1 = 0; //limpiar registro de control 1
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	605a      	str	r2, [r3, #4]
	ADC1->CR2 = 0; //limpiar registro de control 2
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]

	/*Configurar Triger Externo*/
	ADC1->CR2 |= ADC_CR2_EXTEN_0; //disparo externo por flanco ascendente
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= 0x6U<<ADC_CR2_EXTSEL_Pos; //trigger Timer2 event
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000af2:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000af6:	6093      	str	r3, [r2, #8]

	/*habilitar la interrupcio*/
	ADC1->CR1 |= ADC_CR1_EOCIE;  //habilitar interrupcion por end of conversion
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	6053      	str	r3, [r2, #4]
	NVIC_EnableIRQ(ADC_IRQn);  //habilitar interrupciones globales NVIC
 8000b04:	2012      	movs	r0, #18
 8000b06:	f7ff ff7f 	bl	8000a08 <__NVIC_EnableIRQ>

	//habilitar ADC
	ADC1->CR2 |= ADC_CR2_ADON; //encender ADC
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <ADC_SingleModeInit+0xcc>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6093      	str	r3, [r2, #8]

	return;
 8000b16:	bf00      	nop

}
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40012000 	.word	0x40012000
 8000b28:	40012300 	.word	0x40012300
 8000b2c:	00000000 	.word	0x00000000

08000b30 <TMR2_init>:

void TMR2_init(uint32_t freq){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uint32_t arr;
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <TMR2_init+0x80>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	; (8000bb0 <TMR2_init+0x80>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
	/*Configura el PSC(prescaler) y ARR(valor de autorecarga)
	 * update_event = Ftim/(PSC + 1) * (ARR + 1)
	 * PSC=0;
	 * ARR = 16Mhz/(freq) - 1
	 */
	arr = 16E+6/ (freq - 1); //arr = SystemCoreClock / freq - 1;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fc87 	bl	800045c <__aeabi_ui2d>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	a115      	add	r1, pc, #84	; (adr r1, 8000ba8 <TMR2_init+0x78>)
 8000b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b58:	f7ff fe24 	bl	80007a4 <__aeabi_ddiv>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4610      	mov	r0, r2
 8000b62:	4619      	mov	r1, r3
 8000b64:	f7ff ff06 	bl	8000974 <__aeabi_d2uiz>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60fb      	str	r3, [r7, #12]
	TIM2->PSC = 0;
 8000b6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = arr;
 8000b74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR2 &= ~TIM_CR2_MMS; //master mode selection
 8000b7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b8a:	6053      	str	r3, [r2, #4]
	TIM2->CR2 |= TIM_CR2_MMS_1; //activar update event como salida TRIGGER TIMER
 8000b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b96:	f043 0320 	orr.w	r3, r3, #32
 8000b9a:	6053      	str	r3, [r2, #4]
	return;
 8000b9c:	bf00      	nop
}
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	416e8480 	.word	0x416e8480
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <ADC_IRQHandler>:

/****************ISR**************************/
void ADC_IRQHandler(void){
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	if(ADC1->SR & ADC_SR_EOC){ //el bit EOC (end of conversion) se puso en 1?
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <ADC_IRQHandler+0x24>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 0302 	and.w	r3, r3, #2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d004      	beq.n	8000bce <ADC_IRQHandler+0x1a>
		adcRead= ADC1->DR; //leer el valor del adc
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <ADC_IRQHandler+0x24>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <ADC_IRQHandler+0x28>)
 8000bcc:	801a      	strh	r2, [r3, #0]
	}
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40012000 	.word	0x40012000
 8000bdc:	20000020 	.word	0x20000020

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	2302      	movs	r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c1e:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <SystemCoreClockUpdate+0xec>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	f003 030c 	and.w	r3, r3, #12
 8000c26:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d011      	beq.n	8000c52 <SystemCoreClockUpdate+0x4e>
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d844      	bhi.n	8000cbe <SystemCoreClockUpdate+0xba>
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <SystemCoreClockUpdate+0x3e>
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	2b04      	cmp	r3, #4
 8000c3e:	d004      	beq.n	8000c4a <SystemCoreClockUpdate+0x46>
 8000c40:	e03d      	b.n	8000cbe <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000c42:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <SystemCoreClockUpdate+0xf0>)
 8000c44:	4a2c      	ldr	r2, [pc, #176]	; (8000cf8 <SystemCoreClockUpdate+0xf4>)
 8000c46:	601a      	str	r2, [r3, #0]
      break;
 8000c48:	e03d      	b.n	8000cc6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <SystemCoreClockUpdate+0xf0>)
 8000c4c:	4a2b      	ldr	r2, [pc, #172]	; (8000cfc <SystemCoreClockUpdate+0xf8>)
 8000c4e:	601a      	str	r2, [r3, #0]
      break;
 8000c50:	e039      	b.n	8000cc6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c52:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <SystemCoreClockUpdate+0xec>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	0d9b      	lsrs	r3, r3, #22
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <SystemCoreClockUpdate+0xec>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c66:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00c      	beq.n	8000c88 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <SystemCoreClockUpdate+0xf8>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <SystemCoreClockUpdate+0xec>)
 8000c78:	6852      	ldr	r2, [r2, #4]
 8000c7a:	0992      	lsrs	r2, r2, #6
 8000c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c80:	fb02 f303 	mul.w	r3, r2, r3
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e00b      	b.n	8000ca0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c88:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <SystemCoreClockUpdate+0xf4>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c90:	4a17      	ldr	r2, [pc, #92]	; (8000cf0 <SystemCoreClockUpdate+0xec>)
 8000c92:	6852      	ldr	r2, [r2, #4]
 8000c94:	0992      	lsrs	r2, r2, #6
 8000c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c9a:	fb02 f303 	mul.w	r3, r2, r3
 8000c9e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <SystemCoreClockUpdate+0xec>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	3301      	adds	r3, #1
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <SystemCoreClockUpdate+0xf0>)
 8000cba:	6013      	str	r3, [r2, #0]
      break;
 8000cbc:	e003      	b.n	8000cc6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <SystemCoreClockUpdate+0xf0>)
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <SystemCoreClockUpdate+0xf4>)
 8000cc2:	601a      	str	r2, [r3, #0]
      break;
 8000cc4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <SystemCoreClockUpdate+0xec>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	091b      	lsrs	r3, r3, #4
 8000ccc:	f003 030f 	and.w	r3, r3, #15
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <SystemCoreClockUpdate+0xfc>)
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <SystemCoreClockUpdate+0xf0>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <SystemCoreClockUpdate+0xf0>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	00f42400 	.word	0x00f42400
 8000cfc:	007a1200 	.word	0x007a1200
 8000d00:	08000db8 	.word	0x08000db8

08000d04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d08:	f7ff ff6a 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	; (8000d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <LoopForever+0xe>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	; (8000d50 <LoopForever+0x16>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d32:	f000 f811 	bl	8000d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d36:	f7ff fe85 	bl	8000a44 <main>

08000d3a <LoopForever>:

LoopForever:
    b LoopForever
 8000d3a:	e7fe      	b.n	8000d3a <LoopForever>
  ldr   r0, =_estack
 8000d3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000d48:	08000dd0 	.word	0x08000dd0
  ldr r2, =_sbss
 8000d4c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000d50:	20000024 	.word	0x20000024

08000d54 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <BusFault_Handler>
	...

08000d58 <__libc_init_array>:
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	4d0d      	ldr	r5, [pc, #52]	; (8000d90 <__libc_init_array+0x38>)
 8000d5c:	4c0d      	ldr	r4, [pc, #52]	; (8000d94 <__libc_init_array+0x3c>)
 8000d5e:	1b64      	subs	r4, r4, r5
 8000d60:	10a4      	asrs	r4, r4, #2
 8000d62:	2600      	movs	r6, #0
 8000d64:	42a6      	cmp	r6, r4
 8000d66:	d109      	bne.n	8000d7c <__libc_init_array+0x24>
 8000d68:	4d0b      	ldr	r5, [pc, #44]	; (8000d98 <__libc_init_array+0x40>)
 8000d6a:	4c0c      	ldr	r4, [pc, #48]	; (8000d9c <__libc_init_array+0x44>)
 8000d6c:	f000 f818 	bl	8000da0 <_init>
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	10a4      	asrs	r4, r4, #2
 8000d74:	2600      	movs	r6, #0
 8000d76:	42a6      	cmp	r6, r4
 8000d78:	d105      	bne.n	8000d86 <__libc_init_array+0x2e>
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d80:	4798      	blx	r3
 8000d82:	3601      	adds	r6, #1
 8000d84:	e7ee      	b.n	8000d64 <__libc_init_array+0xc>
 8000d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d8a:	4798      	blx	r3
 8000d8c:	3601      	adds	r6, #1
 8000d8e:	e7f2      	b.n	8000d76 <__libc_init_array+0x1e>
 8000d90:	08000dc8 	.word	0x08000dc8
 8000d94:	08000dc8 	.word	0x08000dc8
 8000d98:	08000dc8 	.word	0x08000dc8
 8000d9c:	08000dcc 	.word	0x08000dcc

08000da0 <_init>:
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	bf00      	nop
 8000da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da6:	bc08      	pop	{r3}
 8000da8:	469e      	mov	lr, r3
 8000daa:	4770      	bx	lr

08000dac <_fini>:
 8000dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dae:	bf00      	nop
 8000db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db2:	bc08      	pop	{r3}
 8000db4:	469e      	mov	lr, r3
 8000db6:	4770      	bx	lr
