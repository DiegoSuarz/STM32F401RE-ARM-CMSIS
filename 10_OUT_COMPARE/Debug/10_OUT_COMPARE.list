
10_OUT_COMPARE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a21  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000206  00000000  00000000  00010e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000058  00000000  00000000  00011090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000031e  00000000  00000000  000110e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b5c  00000000  00000000  00011406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fccf  00000000  00000000  00011f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00061c31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f0  00000000  00000000  00061c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000394 	.word	0x08000394

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000394 	.word	0x08000394

080001d4 <main>:

void GPIO_Init(void);


int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
	GPIO_Init();
 80001d8:	f000 f862 	bl	80002a0 <GPIO_Init>
	TMR3_Compare_PWMmode();
 80001dc:	f000 f808 	bl	80001f0 <TMR3_Compare_PWMmode>
    /* Loop forever */
	for(;;){
		TIM3->CCR2 = 1000;
 80001e0:	4b02      	ldr	r3, [pc, #8]	; (80001ec <main+0x18>)
 80001e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001e6:	639a      	str	r2, [r3, #56]	; 0x38
 80001e8:	e7fa      	b.n	80001e0 <main+0xc>
 80001ea:	bf00      	nop
 80001ec:	40000400 	.word	0x40000400

080001f0 <TMR3_Compare_PWMmode>:

	}
}


void TMR3_Compare_PWMmode(void){
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	//configurar el pin asignado al canal 1
	RCC->AHB1ENR |= GPIOX_CLOCK(TMR3_CH2); //habilitando reloj
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <TMR3_Compare_PWMmode+0xa4>)
 80001f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f8:	4a26      	ldr	r2, [pc, #152]	; (8000294 <TMR3_Compare_PWMmode+0xa4>)
 80001fa:	f043 0302 	orr.w	r3, r3, #2
 80001fe:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_ALTER,TMR3_CH2);  //configurando PA5 modo funcion alternativa
 8000200:	4b25      	ldr	r3, [pc, #148]	; (8000298 <TMR3_Compare_PWMmode+0xa8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000208:	4a23      	ldr	r2, [pc, #140]	; (8000298 <TMR3_Compare_PWMmode+0xa8>)
 800020a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800020e:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(2,TMR3_CH2);	//configurando funcion alternativa AF02, trabaja con tmr3
 8000210:	4b21      	ldr	r3, [pc, #132]	; (8000298 <TMR3_Compare_PWMmode+0xa8>)
 8000212:	6a1b      	ldr	r3, [r3, #32]
 8000214:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000218:	4a1f      	ldr	r2, [pc, #124]	; (8000298 <TMR3_Compare_PWMmode+0xa8>)
 800021a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800021e:	6213      	str	r3, [r2, #32]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH,TMR3_CH2); //configurando la velocidad del pin PA5 alta velocidad
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <TMR3_Compare_PWMmode+0xa8>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a1c      	ldr	r2, [pc, #112]	; (8000298 <TMR3_Compare_PWMmode+0xa8>)
 8000226:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800022a:	6093      	str	r3, [r2, #8]
	 * para F = 50 hz, CK_PSC = 16Mhz , Pres = 15
	 * ARR = (16E+6/(15 + 1)(50))-1
	 * ARR = 20000 - 1
	 * ARR = 19999 (valor aceptable 16bits)
	 */
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; //habilitar el reloj del timer2
 800022c:	4b19      	ldr	r3, [pc, #100]	; (8000294 <TMR3_Compare_PWMmode+0xa4>)
 800022e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000230:	4a18      	ldr	r2, [pc, #96]	; (8000294 <TMR3_Compare_PWMmode+0xa4>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->CR1 = 0; //configuracion del tmr2 ver datasheet
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
	TIM3->PSC = 16 - 1 ; //prescaler: 0 (0ff)
 800023e:	4b17      	ldr	r3, [pc, #92]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 8000240:	220f      	movs	r2, #15
 8000242:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 20000 - 1; //limpiamos el valor de autorecarga
 8000244:	4b15      	ldr	r3, [pc, #84]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 8000246:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800024a:	62da      	str	r2, [r3, #44]	; 0x2c

	//Configurar el modo de funcionamiento del canal
	TIM3->CCMR1 &=~TIM_CCMR1_CC1S; //configurar como salida Compare
 800024c:	4b13      	ldr	r3, [pc, #76]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a12      	ldr	r2, [pc, #72]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 8000252:	f023 0303 	bic.w	r3, r3, #3
 8000256:	6193      	str	r3, [r2, #24]

	TIM3->CCMR1 &=~TIM_CCMR1_OC2M;
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a0f      	ldr	r2, [pc, #60]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 800025e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000262:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |= 0x6U<<12; //Compare modo PWM-> modo 1
 8000264:	4b0d      	ldr	r3, [pc, #52]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a0c      	ldr	r2, [pc, #48]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 800026a:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800026e:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC2E; //habilitamos el canal
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 8000272:	6a1b      	ldr	r3, [r3, #32]
 8000274:	4a09      	ldr	r2, [pc, #36]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6213      	str	r3, [r2, #32]

	TIM3->CCR2 |= TIM_CR1_CEN; //habilitamos el TMR3
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 800027e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000280:	4a06      	ldr	r2, [pc, #24]	; (800029c <TMR3_Compare_PWMmode+0xac>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6393      	str	r3, [r2, #56]	; 0x38

}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40023800 	.word	0x40023800
 8000298:	40020400 	.word	0x40020400
 800029c:	40000400 	.word	0x40000400

080002a0 <GPIO_Init>:

void GPIO_Init(void){
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOX_CLOCK(LED); //habilitando reloj para pin PA5 (led)
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <GPIO_Init+0x2c>)
 80002a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a8:	4a08      	ldr	r2, [pc, #32]	; (80002cc <GPIO_Init+0x2c>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT,LED); //PA5 salida
 80002b0:	4b07      	ldr	r3, [pc, #28]	; (80002d0 <GPIO_Init+0x30>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002b8:	4a05      	ldr	r2, [pc, #20]	; (80002d0 <GPIO_Init+0x30>)
 80002ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020000 	.word	0x40020000

080002d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <SystemInit+0x20>)
 80002da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <SystemInit+0x20>)
 80002e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f7ff ffea 	bl	80002d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ff53 	bl	80001d4 <main>

0800032e <LoopForever>:

LoopForever:
    b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000001c 	.word	0x2000001c

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	; (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	; (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	; (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	; (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
