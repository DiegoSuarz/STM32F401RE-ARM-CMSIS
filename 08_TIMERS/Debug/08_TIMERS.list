
08_TIMERS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000438  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00010438  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00010438  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000438  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000434  08000434  00010434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000438  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000438  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011b4  00000000  00000000  00010468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d9  00000000  00000000  0001161c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  000119f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000078  00000000  00000000  00011aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de3e  00000000  00000000  00011b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010d5  00000000  00000000  0001f95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000500d5  00000000  00000000  00020a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00070b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000174  00000000  00000000  00070b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000418 	.word	0x08000418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000418 	.word	0x08000418

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <Timer4_Init>:
/*function definition...................*/
/*
 * @brief: funcion para generar retardos en ms
 * @param [ck_psc]: frecuencia de entrada al timer
 */
void Timer4_Init(uint32_t ck_psc){
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	uint32_t temp;

	/*habilitar el reloj del bus que esta asociado el timer, para TIMER4 -> APB1*/
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <Timer4_Init+0x64>)
 800021a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800021c:	4a15      	ldr	r2, [pc, #84]	; (8000274 <Timer4_Init+0x64>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6413      	str	r3, [r2, #64]	; 0x40
	TIM4->CR1 &= ~TIM_CR1_CEN; //deshabilitar TIMER4
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <Timer4_Init+0x68>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a13      	ldr	r2, [pc, #76]	; (8000278 <Timer4_Init+0x68>)
 800022a:	f023 0301 	bic.w	r3, r3, #1
 800022e:	6013      	str	r3, [r2, #0]
	 *
	 *Formula:  Tiempo = (PSC+1)(ARR+1)/Fclock_PSC
	*/

	//calculo del prescaler
	temp = ck_psc / 1000000UL; //temp = 16000000/1000000 = 16
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a12      	ldr	r2, [pc, #72]	; (800027c <Timer4_Init+0x6c>)
 8000234:	fba2 2303 	umull	r2, r3, r2, r3
 8000238:	0c9b      	lsrs	r3, r3, #18
 800023a:	60fb      	str	r3, [r7, #12]
	TIM4->PSC = temp-1; //PCS = 15
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <Timer4_Init+0x68>)
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3b01      	subs	r3, #1
 8000242:	6293      	str	r3, [r2, #40]	; 0x28

	//calculo del valor de autorecarga (ARR)
	TIM4->ARR = 1000 - 1; //ARR = 999
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <Timer4_Init+0x68>)
 8000246:	f240 32e7 	movw	r2, #999	; 0x3e7
 800024a:	62da      	str	r2, [r3, #44]	; 0x2c
	 * 	ARR = ((1x10E-3*16x10E+6)/(15+1))-1
	 * 	ARR = 999
	 */

	/*Configurar interrupciones...........*/
	TIM4->DIER |= TIM_DIER_UIE; //habilitar interrupcion por desbordamiento
 800024c:	4b0a      	ldr	r3, [pc, #40]	; (8000278 <Timer4_Init+0x68>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a09      	ldr	r2, [pc, #36]	; (8000278 <Timer4_Init+0x68>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM4_IRQn);	//habilitar interrupcion NVIC del CPU para timer4
 8000258:	201e      	movs	r0, #30
 800025a:	f7ff ffbb 	bl	80001d4 <__NVIC_EnableIRQ>

	//activar timer
	TIM4->CR1 |= TIM_CR1_CEN;
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <Timer4_Init+0x68>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <Timer4_Init+0x68>)
 8000264:	f043 0301 	orr.w	r3, r3, #1
 8000268:	6013      	str	r3, [r2, #0]

}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	40000800 	.word	0x40000800
 800027c:	431bde83 	.word	0x431bde83

08000280 <Timer4_delayms>:

/*
 * @brief: genera retardos en ms
 * @param [ms]: retardo en ms deseado
 */
void Timer4_delayms(uint32_t ms){
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]

	uint32_t tickstart;
	uint32_t wait = ms;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	60fb      	str	r3, [r7, #12]

	//generar retardo
	tickstart = uwTick_tim;
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <Timer4_delayms+0x30>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	60bb      	str	r3, [r7, #8]
	while((uwTick_tim - tickstart) < wait);
 8000292:	bf00      	nop
 8000294:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <Timer4_delayms+0x30>)
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	1ad3      	subs	r3, r2, r3
 800029c:	68fa      	ldr	r2, [r7, #12]
 800029e:	429a      	cmp	r2, r3
 80002a0:	d8f8      	bhi.n	8000294 <Timer4_delayms+0x14>
}
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	2000001c 	.word	0x2000001c

080002b4 <main>:
 * Generar bases de tiempos con TIMERS, el stm32f401 no cuenta con timers basicos
 */
void GPIO_Init(void);

int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
    /* Loop forever */
	GPIO_Init();
 80002b8:	f000 f816 	bl	80002e8 <GPIO_Init>
	Timer4_Init(16E+6);
 80002bc:	4808      	ldr	r0, [pc, #32]	; (80002e0 <main+0x2c>)
 80002be:	f7ff ffa7 	bl	8000210 <Timer4_Init>

	for(;;){
		GPIOX_ODR(LED)=0;
 80002c2:	4b08      	ldr	r3, [pc, #32]	; (80002e4 <main+0x30>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
		Timer4_delayms(1000); //100ms
 80002c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002cc:	f7ff ffd8 	bl	8000280 <Timer4_delayms>
		GPIOX_ODR(LED)=1;
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <main+0x30>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	601a      	str	r2, [r3, #0]
		Timer4_delayms(1000); //100ms
 80002d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002da:	f7ff ffd1 	bl	8000280 <Timer4_delayms>
		GPIOX_ODR(LED)=0;
 80002de:	e7f0      	b.n	80002c2 <main+0xe>
 80002e0:	00f42400 	.word	0x00f42400
 80002e4:	42400294 	.word	0x42400294

080002e8 <GPIO_Init>:
	}
}

void GPIO_Init(void){
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOX_CLOCK(LED); //habilitando reloj para pin PA5 (led)
 80002ec:	4b09      	ldr	r3, [pc, #36]	; (8000314 <GPIO_Init+0x2c>)
 80002ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f0:	4a08      	ldr	r2, [pc, #32]	; (8000314 <GPIO_Init+0x2c>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT,LED); //PA5 salida
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <GPIO_Init+0x30>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000300:	4a05      	ldr	r2, [pc, #20]	; (8000318 <GPIO_Init+0x30>)
 8000302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000306:	6013      	str	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40023800 	.word	0x40023800
 8000318:	40020000 	.word	0x40020000

0800031c <TIM4_IRQHandler>:

/****ISR***********************************/
void TIM4_IRQHandler(void){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	extern volatile uint32_t uwTick_tim;
	if(TIM4->SR & TIM_SR_UIF){ //la bandera timer4 se ha activado?
 8000320:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <TIM4_IRQHandler+0x34>)
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	f003 0301 	and.w	r3, r3, #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d00b      	beq.n	8000344 <TIM4_IRQHandler+0x28>
		TIM4-> SR &= ~TIM_SR_UIF; //borrar bandera de interrupcion
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <TIM4_IRQHandler+0x34>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <TIM4_IRQHandler+0x34>)
 8000332:	f023 0301 	bic.w	r3, r3, #1
 8000336:	6113      	str	r3, [r2, #16]

		/*codigo de usuario*/
		uwTick_tim += 1;
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <TIM4_IRQHandler+0x38>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	3301      	adds	r3, #1
 800033e:	4a05      	ldr	r2, [pc, #20]	; (8000354 <TIM4_IRQHandler+0x38>)
 8000340:	6013      	str	r3, [r2, #0]
	}
	return;
 8000342:	bf00      	nop
 8000344:	bf00      	nop
}
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40000800 	.word	0x40000800
 8000354:	2000001c 	.word	0x2000001c

08000358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <SystemInit+0x20>)
 800035e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000362:	4a05      	ldr	r2, [pc, #20]	; (8000378 <SystemInit+0x20>)
 8000364:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	; (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f7ff ffea 	bl	8000358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	; (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	; (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	; (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f811 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff81 	bl	80002b4 <main>

080003b2 <LoopForever>:

LoopForever:
    b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c0:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c8:	20000020 	.word	0x20000020

080003cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	; (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	; (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	; (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	; (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
