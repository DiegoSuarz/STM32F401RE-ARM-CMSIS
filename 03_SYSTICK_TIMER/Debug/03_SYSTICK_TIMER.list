
03_SYSTICK_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000314  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080004a8  080004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004b8  080004b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004b8  080004b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b8  080004b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004bc  080004bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080004c4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004c4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a5d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000346  00000000  00000000  00020a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00020dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00020e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd08  00000000  00000000  00020ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000010dd  00000000  00000000  0002ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f63b  00000000  00000000  0002fcd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007f310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000150  00000000  00000000  0007f360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000490 	.word	0x08000490

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000490 	.word	0x08000490

080001d4 <delay_init>:
 * 		ValorDeRecarga = SysTickCounterClock x TemporizaciÃ³nDeseada(s)
 * 		ValorDeRecarga = 16000000 x 0.001
 * 		ValorDeRecarga = 16000
 */

void delay_init(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uint32_t temp;

	SysTick->CTRL = 0; //deshabilita la systick
 80001da:	4b10      	ldr	r3, [pc, #64]	; (800021c <delay_init+0x48>)
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
	SystemCoreClockUpdate(); //actualizo el valor del FOSC
 80001e0:	f000 f888 	bl	80002f4 <SystemCoreClockUpdate>

#if(DELAY_MODE == 0)  //trabaja en us y ms
	temp = SystemCoreClock / 1000000UL;
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <delay_init+0x4c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <delay_init+0x50>)
 80001ea:	fba2 2303 	umull	r2, r3, r2, r3
 80001ee:	0c9b      	lsrs	r3, r3, #18
 80001f0:	607b      	str	r3, [r7, #4]

#else
#error "Eleccion incorrecta"
#endif

	SysTick ->LOAD = temp - 1; //Cargar el valor de RELOAD
 80001f2:	4a0a      	ldr	r2, [pc, #40]	; (800021c <delay_init+0x48>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	3b01      	subs	r3, #1
 80001f8:	6053      	str	r3, [r2, #4]
	SysTick ->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //toma la fuente de relog SYSCLK
 80001fa:	4b08      	ldr	r3, [pc, #32]	; (800021c <delay_init+0x48>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a07      	ldr	r2, [pc, #28]	; (800021c <delay_init+0x48>)
 8000200:	f043 0304 	orr.w	r3, r3, #4
 8000204:	6013      	str	r3, [r2, #0]
	SysTick ->CTRL |= SysTick_CTRL_ENABLE_Msk; //habilitar el conteo
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <delay_init+0x48>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a04      	ldr	r2, [pc, #16]	; (800021c <delay_init+0x48>)
 800020c:	f043 0301 	orr.w	r3, r3, #1
 8000210:	6013      	str	r3, [r2, #0]
	return;
 8000212:	bf00      	nop

}
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	e000e010 	.word	0xe000e010
 8000220:	20000000 	.word	0x20000000
 8000224:	431bde83 	.word	0x431bde83

08000228 <delay_us>:

#if (DELAY_MODE == 0)

void delay_us(uint32_t delay){
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	uint32_t cont;
	SysTick->VAL = 0; //inicializamos a 0 el contador
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <delay_us+0x3c>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
	for(cont=0; cont<delay; cont++){
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	e009      	b.n	8000250 <delay_us+0x28>
		while(!(SysTick->CTRL & 1U << 16));
 800023c:	bf00      	nop
 800023e:	4b09      	ldr	r3, [pc, #36]	; (8000264 <delay_us+0x3c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f9      	beq.n	800023e <delay_us+0x16>
	for(cont=0; cont<delay; cont++){
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	3301      	adds	r3, #1
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	68fa      	ldr	r2, [r7, #12]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	429a      	cmp	r2, r3
 8000256:	d3f1      	bcc.n	800023c <delay_us+0x14>
	}
	return;
 8000258:	bf00      	nop
}
 800025a:	3714      	adds	r7, #20
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	e000e010 	.word	0xe000e010

08000268 <main>:
#define PIN_A5				*((volatile unsigned char*)(BITBAND_PERI(GPIOA_BASE + 0x14,5)))

void config_port(void);

int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
    delay_init();
 800026c:	f7ff ffb2 	bl	80001d4 <delay_init>
    config_port();
 8000270:	f000 f810 	bl	8000294 <config_port>

	for(;;){
		PIN_A5 = 1;
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <main+0x28>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
		delay_us(100);
 800027a:	2064      	movs	r0, #100	; 0x64
 800027c:	f7ff ffd4 	bl	8000228 <delay_us>
		PIN_A5 = 0;
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <main+0x28>)
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
		delay_us(100);
 8000286:	2064      	movs	r0, #100	; 0x64
 8000288:	f7ff ffce 	bl	8000228 <delay_us>
		PIN_A5 = 1;
 800028c:	e7f2      	b.n	8000274 <main+0xc>
 800028e:	bf00      	nop
 8000290:	42400294 	.word	0x42400294

08000294 <config_port>:
	}
}

void config_port(void){
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0

	//configurando PINA5 como salida
	RCC->AHB1ENR |= 1U;
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <config_port+0x34>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <config_port+0x34>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &=~(GPIO_MODER_MODE5);
 80002a4:	4b09      	ldr	r3, [pc, #36]	; (80002cc <config_port+0x38>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a08      	ldr	r2, [pc, #32]	; (80002cc <config_port+0x38>)
 80002aa:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <config_port+0x38>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a05      	ldr	r2, [pc, #20]	; (80002cc <config_port+0x38>)
 80002b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ba:	6013      	str	r3, [r2, #0]

}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020000 	.word	0x40020000

080002d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <SystemInit+0x20>)
 80002d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002da:	4a05      	ldr	r2, [pc, #20]	; (80002f0 <SystemInit+0x20>)
 80002dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b087      	sub	sp, #28
 80002f8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]
 8000302:	2302      	movs	r3, #2
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	2300      	movs	r3, #0
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	2302      	movs	r3, #2
 800030c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800030e:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <SystemCoreClockUpdate+0xec>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f003 030c 	and.w	r3, r3, #12
 8000316:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	2b08      	cmp	r3, #8
 800031c:	d011      	beq.n	8000342 <SystemCoreClockUpdate+0x4e>
 800031e:	693b      	ldr	r3, [r7, #16]
 8000320:	2b08      	cmp	r3, #8
 8000322:	d844      	bhi.n	80003ae <SystemCoreClockUpdate+0xba>
 8000324:	693b      	ldr	r3, [r7, #16]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d003      	beq.n	8000332 <SystemCoreClockUpdate+0x3e>
 800032a:	693b      	ldr	r3, [r7, #16]
 800032c:	2b04      	cmp	r3, #4
 800032e:	d004      	beq.n	800033a <SystemCoreClockUpdate+0x46>
 8000330:	e03d      	b.n	80003ae <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <SystemCoreClockUpdate+0xf0>)
 8000334:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <SystemCoreClockUpdate+0xf4>)
 8000336:	601a      	str	r2, [r3, #0]
      break;
 8000338:	e03d      	b.n	80003b6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800033a:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <SystemCoreClockUpdate+0xf0>)
 800033c:	4a2b      	ldr	r2, [pc, #172]	; (80003ec <SystemCoreClockUpdate+0xf8>)
 800033e:	601a      	str	r2, [r3, #0]
      break;
 8000340:	e039      	b.n	80003b6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000342:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <SystemCoreClockUpdate+0xec>)
 8000344:	685b      	ldr	r3, [r3, #4]
 8000346:	0d9b      	lsrs	r3, r3, #22
 8000348:	f003 0301 	and.w	r3, r3, #1
 800034c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800034e:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <SystemCoreClockUpdate+0xec>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000356:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d00c      	beq.n	8000378 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800035e:	4a23      	ldr	r2, [pc, #140]	; (80003ec <SystemCoreClockUpdate+0xf8>)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	fbb2 f3f3 	udiv	r3, r2, r3
 8000366:	4a1e      	ldr	r2, [pc, #120]	; (80003e0 <SystemCoreClockUpdate+0xec>)
 8000368:	6852      	ldr	r2, [r2, #4]
 800036a:	0992      	lsrs	r2, r2, #6
 800036c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000370:	fb02 f303 	mul.w	r3, r2, r3
 8000374:	617b      	str	r3, [r7, #20]
 8000376:	e00b      	b.n	8000390 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <SystemCoreClockUpdate+0xf4>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <SystemCoreClockUpdate+0xec>)
 8000382:	6852      	ldr	r2, [r2, #4]
 8000384:	0992      	lsrs	r2, r2, #6
 8000386:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800038a:	fb02 f303 	mul.w	r3, r2, r3
 800038e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <SystemCoreClockUpdate+0xec>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	0c1b      	lsrs	r3, r3, #16
 8000396:	f003 0303 	and.w	r3, r3, #3
 800039a:	3301      	adds	r3, #1
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80003a0:	697a      	ldr	r2, [r7, #20]
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <SystemCoreClockUpdate+0xf0>)
 80003aa:	6013      	str	r3, [r2, #0]
      break;
 80003ac:	e003      	b.n	80003b6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <SystemCoreClockUpdate+0xf0>)
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <SystemCoreClockUpdate+0xf4>)
 80003b2:	601a      	str	r2, [r3, #0]
      break;
 80003b4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <SystemCoreClockUpdate+0xec>)
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	091b      	lsrs	r3, r3, #4
 80003bc:	f003 030f 	and.w	r3, r3, #15
 80003c0:	4a0b      	ldr	r2, [pc, #44]	; (80003f0 <SystemCoreClockUpdate+0xfc>)
 80003c2:	5cd3      	ldrb	r3, [r2, r3]
 80003c4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <SystemCoreClockUpdate+0xf0>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	fa22 f303 	lsr.w	r3, r2, r3
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <SystemCoreClockUpdate+0xf0>)
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	bf00      	nop
 80003d6:	371c      	adds	r7, #28
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40023800 	.word	0x40023800
 80003e4:	20000000 	.word	0x20000000
 80003e8:	00f42400 	.word	0x00f42400
 80003ec:	007a1200 	.word	0x007a1200
 80003f0:	080004a8 	.word	0x080004a8

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f7ff ff6a 	bl	80002d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f000 f811 	bl	8000448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f7ff ff1f 	bl	8000268 <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000438:	080004c0 	.word	0x080004c0
  ldr r2, =_sbss
 800043c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000440:	20000020 	.word	0x20000020

08000444 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC_IRQHandler>
	...

08000448 <__libc_init_array>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	4d0d      	ldr	r5, [pc, #52]	; (8000480 <__libc_init_array+0x38>)
 800044c:	4c0d      	ldr	r4, [pc, #52]	; (8000484 <__libc_init_array+0x3c>)
 800044e:	1b64      	subs	r4, r4, r5
 8000450:	10a4      	asrs	r4, r4, #2
 8000452:	2600      	movs	r6, #0
 8000454:	42a6      	cmp	r6, r4
 8000456:	d109      	bne.n	800046c <__libc_init_array+0x24>
 8000458:	4d0b      	ldr	r5, [pc, #44]	; (8000488 <__libc_init_array+0x40>)
 800045a:	4c0c      	ldr	r4, [pc, #48]	; (800048c <__libc_init_array+0x44>)
 800045c:	f000 f818 	bl	8000490 <_init>
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	10a4      	asrs	r4, r4, #2
 8000464:	2600      	movs	r6, #0
 8000466:	42a6      	cmp	r6, r4
 8000468:	d105      	bne.n	8000476 <__libc_init_array+0x2e>
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000470:	4798      	blx	r3
 8000472:	3601      	adds	r6, #1
 8000474:	e7ee      	b.n	8000454 <__libc_init_array+0xc>
 8000476:	f855 3b04 	ldr.w	r3, [r5], #4
 800047a:	4798      	blx	r3
 800047c:	3601      	adds	r6, #1
 800047e:	e7f2      	b.n	8000466 <__libc_init_array+0x1e>
 8000480:	080004b8 	.word	0x080004b8
 8000484:	080004b8 	.word	0x080004b8
 8000488:	080004b8 	.word	0x080004b8
 800048c:	080004bc 	.word	0x080004bc

08000490 <_init>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr

0800049c <_fini>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr
