
07_USART_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001464  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08001604  08001604  00011604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001660  08001660  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08001660  08001660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001668  08001668  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001668  08001668  00011668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800166c  0800166c  0001166c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000064  080016d4  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080016d4  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bb3  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000646  00000000  00000000  00021c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  00022290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  000223b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f1e3  00000000  00000000  00022498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e86  00000000  00000000  0003167b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054efe  00000000  00000000  00033501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000883ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007e0  00000000  00000000  00088450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080015ec 	.word	0x080015ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080015ec 	.word	0x080015ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <USART_Init>:
 * @brief configura el USARTx como:
 * 1-bit stop
 * sin paridad
 * 8-bit de datos
 */
void USART_Init(USART_TypeDef * USARTx,uint32_t pclk, uint32_t baud, uint32_t adic_param){
 8000584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000588:	b0c0      	sub	sp, #256	; 0x100
 800058a:	af00      	add	r7, sp, #0
 800058c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8000590:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8000594:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8000598:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	/*habilitar el reloj*/
	if(USARTx == USART1){
 800059c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80005a0:	4b94      	ldr	r3, [pc, #592]	; (80007f4 <USART_Init+0x270>)
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d106      	bne.n	80005b4 <USART_Init+0x30>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80005a6:	4b94      	ldr	r3, [pc, #592]	; (80007f8 <USART_Init+0x274>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005aa:	4a93      	ldr	r2, [pc, #588]	; (80007f8 <USART_Init+0x274>)
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	6453      	str	r3, [r2, #68]	; 0x44
 80005b2:	e011      	b.n	80005d8 <USART_Init+0x54>
	}else if(USARTx == USART6){
 80005b4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80005b8:	4b90      	ldr	r3, [pc, #576]	; (80007fc <USART_Init+0x278>)
 80005ba:	429a      	cmp	r2, r3
 80005bc:	d106      	bne.n	80005cc <USART_Init+0x48>
		RCC->APB2ENR |= RCC_APB2ENR_USART6EN;
 80005be:	4b8e      	ldr	r3, [pc, #568]	; (80007f8 <USART_Init+0x274>)
 80005c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005c2:	4a8d      	ldr	r2, [pc, #564]	; (80007f8 <USART_Init+0x274>)
 80005c4:	f043 0320 	orr.w	r3, r3, #32
 80005c8:	6453      	str	r3, [r2, #68]	; 0x44
 80005ca:	e005      	b.n	80005d8 <USART_Init+0x54>
	}else{
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80005cc:	4b8a      	ldr	r3, [pc, #552]	; (80007f8 <USART_Init+0x274>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a89      	ldr	r2, [pc, #548]	; (80007f8 <USART_Init+0x274>)
 80005d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
	}
	/*Configurar los parametros de la comunicacion*/
	USARTx->CR1 = adic_param;
 80005d8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80005dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80005e0:	60d3      	str	r3, [r2, #12]
	//Configuracion de la generacion de baudios
	if(adic_param & USART_CR1_OVER8){
 80005e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80005e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	f000 810a 	beq.w	8000804 <USART_Init+0x280>
		USARTx->BRR = UART_BRR_SAMPLING8(pclk, baud);
 80005f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80005f4:	2200      	movs	r2, #0
 80005f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80005fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80005fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8000602:	4622      	mov	r2, r4
 8000604:	462b      	mov	r3, r5
 8000606:	1891      	adds	r1, r2, r2
 8000608:	65b9      	str	r1, [r7, #88]	; 0x58
 800060a:	415b      	adcs	r3, r3
 800060c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800060e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000612:	4621      	mov	r1, r4
 8000614:	eb12 0801 	adds.w	r8, r2, r1
 8000618:	4629      	mov	r1, r5
 800061a:	eb43 0901 	adc.w	r9, r3, r1
 800061e:	f04f 0200 	mov.w	r2, #0
 8000622:	f04f 0300 	mov.w	r3, #0
 8000626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800062a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800062e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000632:	4690      	mov	r8, r2
 8000634:	4699      	mov	r9, r3
 8000636:	4623      	mov	r3, r4
 8000638:	eb18 0303 	adds.w	r3, r8, r3
 800063c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000640:	462b      	mov	r3, r5
 8000642:	eb49 0303 	adc.w	r3, r9, r3
 8000646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800064a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800064e:	2200      	movs	r2, #0
 8000650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000654:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000658:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800065c:	460b      	mov	r3, r1
 800065e:	18db      	adds	r3, r3, r3
 8000660:	653b      	str	r3, [r7, #80]	; 0x50
 8000662:	4613      	mov	r3, r2
 8000664:	eb42 0303 	adc.w	r3, r2, r3
 8000668:	657b      	str	r3, [r7, #84]	; 0x54
 800066a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800066e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8000672:	f7ff fe05 	bl	8000280 <__aeabi_uldivmod>
 8000676:	4602      	mov	r2, r0
 8000678:	460b      	mov	r3, r1
 800067a:	4b61      	ldr	r3, [pc, #388]	; (8000800 <USART_Init+0x27c>)
 800067c:	fba3 2302 	umull	r2, r3, r3, r2
 8000680:	095b      	lsrs	r3, r3, #5
 8000682:	011c      	lsls	r4, r3, #4
 8000684:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000688:	2200      	movs	r2, #0
 800068a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800068e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000692:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8000696:	4642      	mov	r2, r8
 8000698:	464b      	mov	r3, r9
 800069a:	1891      	adds	r1, r2, r2
 800069c:	64b9      	str	r1, [r7, #72]	; 0x48
 800069e:	415b      	adcs	r3, r3
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80006a6:	4641      	mov	r1, r8
 80006a8:	eb12 0a01 	adds.w	sl, r2, r1
 80006ac:	4649      	mov	r1, r9
 80006ae:	eb43 0b01 	adc.w	fp, r3, r1
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80006be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80006c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80006c6:	4692      	mov	sl, r2
 80006c8:	469b      	mov	fp, r3
 80006ca:	4643      	mov	r3, r8
 80006cc:	eb1a 0303 	adds.w	r3, sl, r3
 80006d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80006d4:	464b      	mov	r3, r9
 80006d6:	eb4b 0303 	adc.w	r3, fp, r3
 80006da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80006de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80006e2:	2200      	movs	r2, #0
 80006e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80006e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80006ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80006f0:	460b      	mov	r3, r1
 80006f2:	18db      	adds	r3, r3, r3
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
 80006f6:	4613      	mov	r3, r2
 80006f8:	eb42 0303 	adc.w	r3, r2, r3
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
 80006fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8000702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000706:	f7ff fdbb 	bl	8000280 <__aeabi_uldivmod>
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	4611      	mov	r1, r2
 8000710:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <USART_Init+0x27c>)
 8000712:	fba3 2301 	umull	r2, r3, r3, r1
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	2264      	movs	r2, #100	; 0x64
 800071a:	fb02 f303 	mul.w	r3, r2, r3
 800071e:	1acb      	subs	r3, r1, r3
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000726:	4b36      	ldr	r3, [pc, #216]	; (8000800 <USART_Init+0x27c>)
 8000728:	fba3 2302 	umull	r2, r3, r3, r2
 800072c:	095b      	lsrs	r3, r3, #5
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000734:	441c      	add	r4, r3
 8000736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800073a:	2200      	movs	r2, #0
 800073c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000740:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8000744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8000748:	4642      	mov	r2, r8
 800074a:	464b      	mov	r3, r9
 800074c:	1891      	adds	r1, r2, r2
 800074e:	63b9      	str	r1, [r7, #56]	; 0x38
 8000750:	415b      	adcs	r3, r3
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000758:	4641      	mov	r1, r8
 800075a:	1851      	adds	r1, r2, r1
 800075c:	6339      	str	r1, [r7, #48]	; 0x30
 800075e:	4649      	mov	r1, r9
 8000760:	414b      	adcs	r3, r1
 8000762:	637b      	str	r3, [r7, #52]	; 0x34
 8000764:	f04f 0200 	mov.w	r2, #0
 8000768:	f04f 0300 	mov.w	r3, #0
 800076c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000770:	4659      	mov	r1, fp
 8000772:	00cb      	lsls	r3, r1, #3
 8000774:	4651      	mov	r1, sl
 8000776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800077a:	4651      	mov	r1, sl
 800077c:	00ca      	lsls	r2, r1, #3
 800077e:	4610      	mov	r0, r2
 8000780:	4619      	mov	r1, r3
 8000782:	4603      	mov	r3, r0
 8000784:	4642      	mov	r2, r8
 8000786:	189b      	adds	r3, r3, r2
 8000788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800078c:	464b      	mov	r3, r9
 800078e:	460a      	mov	r2, r1
 8000790:	eb42 0303 	adc.w	r3, r2, r3
 8000794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800079c:	2200      	movs	r2, #0
 800079e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007a2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80007a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80007aa:	460b      	mov	r3, r1
 80007ac:	18db      	adds	r3, r3, r3
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80007b0:	4613      	mov	r3, r2
 80007b2:	eb42 0303 	adc.w	r3, r2, r3
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80007bc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80007c0:	f7ff fd5e 	bl	8000280 <__aeabi_uldivmod>
 80007c4:	4602      	mov	r2, r0
 80007c6:	460b      	mov	r3, r1
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <USART_Init+0x27c>)
 80007ca:	fba3 1302 	umull	r1, r3, r3, r2
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2164      	movs	r1, #100	; 0x64
 80007d2:	fb01 f303 	mul.w	r3, r1, r3
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	3332      	adds	r3, #50	; 0x32
 80007dc:	4a08      	ldr	r2, [pc, #32]	; (8000800 <USART_Init+0x27c>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	f003 0307 	and.w	r3, r3, #7
 80007e8:	18e2      	adds	r2, r4, r3
 80007ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	e103      	b.n	80009fa <USART_Init+0x476>
 80007f2:	bf00      	nop
 80007f4:	40011000 	.word	0x40011000
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40011400 	.word	0x40011400
 8000800:	51eb851f 	.word	0x51eb851f
	}else{
		USARTx->BRR = UART_BRR_SAMPLING16(pclk, baud);
 8000804:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000808:	2200      	movs	r2, #0
 800080a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800080e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8000812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8000816:	4642      	mov	r2, r8
 8000818:	464b      	mov	r3, r9
 800081a:	1891      	adds	r1, r2, r2
 800081c:	6239      	str	r1, [r7, #32]
 800081e:	415b      	adcs	r3, r3
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
 8000822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000826:	4641      	mov	r1, r8
 8000828:	1854      	adds	r4, r2, r1
 800082a:	4649      	mov	r1, r9
 800082c:	eb43 0501 	adc.w	r5, r3, r1
 8000830:	f04f 0200 	mov.w	r2, #0
 8000834:	f04f 0300 	mov.w	r3, #0
 8000838:	00eb      	lsls	r3, r5, #3
 800083a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800083e:	00e2      	lsls	r2, r4, #3
 8000840:	4614      	mov	r4, r2
 8000842:	461d      	mov	r5, r3
 8000844:	4643      	mov	r3, r8
 8000846:	18e3      	adds	r3, r4, r3
 8000848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800084c:	464b      	mov	r3, r9
 800084e:	eb45 0303 	adc.w	r3, r5, r3
 8000852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800085a:	2200      	movs	r2, #0
 800085c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000860:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8000870:	4629      	mov	r1, r5
 8000872:	008b      	lsls	r3, r1, #2
 8000874:	4621      	mov	r1, r4
 8000876:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800087a:	4621      	mov	r1, r4
 800087c:	008a      	lsls	r2, r1, #2
 800087e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8000882:	f7ff fcfd 	bl	8000280 <__aeabi_uldivmod>
 8000886:	4602      	mov	r2, r0
 8000888:	460b      	mov	r3, r1
 800088a:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <USART_Init+0x4b4>)
 800088c:	fba3 2302 	umull	r2, r3, r3, r2
 8000890:	095b      	lsrs	r3, r3, #5
 8000892:	011c      	lsls	r4, r3, #4
 8000894:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000898:	2200      	movs	r2, #0
 800089a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800089e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80008a2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80008a6:	4642      	mov	r2, r8
 80008a8:	464b      	mov	r3, r9
 80008aa:	1891      	adds	r1, r2, r2
 80008ac:	61b9      	str	r1, [r7, #24]
 80008ae:	415b      	adcs	r3, r3
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80008b6:	4641      	mov	r1, r8
 80008b8:	1851      	adds	r1, r2, r1
 80008ba:	6139      	str	r1, [r7, #16]
 80008bc:	4649      	mov	r1, r9
 80008be:	414b      	adcs	r3, r1
 80008c0:	617b      	str	r3, [r7, #20]
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	f04f 0300 	mov.w	r3, #0
 80008ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80008ce:	4659      	mov	r1, fp
 80008d0:	00cb      	lsls	r3, r1, #3
 80008d2:	4651      	mov	r1, sl
 80008d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80008d8:	4651      	mov	r1, sl
 80008da:	00ca      	lsls	r2, r1, #3
 80008dc:	4610      	mov	r0, r2
 80008de:	4619      	mov	r1, r3
 80008e0:	4603      	mov	r3, r0
 80008e2:	4642      	mov	r2, r8
 80008e4:	189b      	adds	r3, r3, r2
 80008e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80008ea:	464b      	mov	r3, r9
 80008ec:	460a      	mov	r2, r1
 80008ee:	eb42 0303 	adc.w	r3, r2, r3
 80008f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80008f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008fa:	2200      	movs	r2, #0
 80008fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80008fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800090c:	4649      	mov	r1, r9
 800090e:	008b      	lsls	r3, r1, #2
 8000910:	4641      	mov	r1, r8
 8000912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8000916:	4641      	mov	r1, r8
 8000918:	008a      	lsls	r2, r1, #2
 800091a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800091e:	f7ff fcaf 	bl	8000280 <__aeabi_uldivmod>
 8000922:	4602      	mov	r2, r0
 8000924:	460b      	mov	r3, r1
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <USART_Init+0x4b4>)
 8000928:	fba3 1302 	umull	r1, r3, r3, r2
 800092c:	095b      	lsrs	r3, r3, #5
 800092e:	2164      	movs	r1, #100	; 0x64
 8000930:	fb01 f303 	mul.w	r3, r1, r3
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	011b      	lsls	r3, r3, #4
 8000938:	3332      	adds	r3, #50	; 0x32
 800093a:	4a3f      	ldr	r2, [pc, #252]	; (8000a38 <USART_Init+0x4b4>)
 800093c:	fba2 2303 	umull	r2, r3, r2, r3
 8000940:	095b      	lsrs	r3, r3, #5
 8000942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000946:	441c      	add	r4, r3
 8000948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800094c:	2200      	movs	r2, #0
 800094e:	673b      	str	r3, [r7, #112]	; 0x70
 8000950:	677a      	str	r2, [r7, #116]	; 0x74
 8000952:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8000956:	4642      	mov	r2, r8
 8000958:	464b      	mov	r3, r9
 800095a:	1891      	adds	r1, r2, r2
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	415b      	adcs	r3, r3
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000966:	4641      	mov	r1, r8
 8000968:	1851      	adds	r1, r2, r1
 800096a:	6039      	str	r1, [r7, #0]
 800096c:	4649      	mov	r1, r9
 800096e:	414b      	adcs	r3, r1
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	f04f 0200 	mov.w	r2, #0
 8000976:	f04f 0300 	mov.w	r3, #0
 800097a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800097e:	4659      	mov	r1, fp
 8000980:	00cb      	lsls	r3, r1, #3
 8000982:	4651      	mov	r1, sl
 8000984:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000988:	4651      	mov	r1, sl
 800098a:	00ca      	lsls	r2, r1, #3
 800098c:	4610      	mov	r0, r2
 800098e:	4619      	mov	r1, r3
 8000990:	4603      	mov	r3, r0
 8000992:	4642      	mov	r2, r8
 8000994:	189b      	adds	r3, r3, r2
 8000996:	66bb      	str	r3, [r7, #104]	; 0x68
 8000998:	464b      	mov	r3, r9
 800099a:	460a      	mov	r2, r1
 800099c:	eb42 0303 	adc.w	r3, r2, r3
 80009a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80009a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009a6:	2200      	movs	r2, #0
 80009a8:	663b      	str	r3, [r7, #96]	; 0x60
 80009aa:	667a      	str	r2, [r7, #100]	; 0x64
 80009ac:	f04f 0200 	mov.w	r2, #0
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80009b8:	4649      	mov	r1, r9
 80009ba:	008b      	lsls	r3, r1, #2
 80009bc:	4641      	mov	r1, r8
 80009be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80009c2:	4641      	mov	r1, r8
 80009c4:	008a      	lsls	r2, r1, #2
 80009c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80009ca:	f7ff fc59 	bl	8000280 <__aeabi_uldivmod>
 80009ce:	4602      	mov	r2, r0
 80009d0:	460b      	mov	r3, r1
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <USART_Init+0x4b4>)
 80009d4:	fba3 1302 	umull	r1, r3, r3, r2
 80009d8:	095b      	lsrs	r3, r3, #5
 80009da:	2164      	movs	r1, #100	; 0x64
 80009dc:	fb01 f303 	mul.w	r3, r1, r3
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	011b      	lsls	r3, r3, #4
 80009e4:	3332      	adds	r3, #50	; 0x32
 80009e6:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <USART_Init+0x4b4>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	095b      	lsrs	r3, r3, #5
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	18e2      	adds	r2, r4, r3
 80009f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80009f8:	609a      	str	r2, [r3, #8]
	}

	USARTx->CR1 |= USART_CR1_TE | USART_CR1_RE;	//habilita RX y TX
 80009fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	f043 020c 	orr.w	r2, r3, #12
 8000a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a08:	60da      	str	r2, [r3, #12]
	USARTx->CR2 &=~(USART_CR2_STOP);			//1-bit de stop
 8000a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a0e:	691b      	ldr	r3, [r3, #16]
 8000a10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a18:	611a      	str	r2, [r3, #16]

	/*habilitar el USART*/
	USARTx->CR1 |= USART_CR1_UE;				//Habilita el usart
 8000a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000a28:	60da      	str	r2, [r3, #12]
}
 8000a2a:	bf00      	nop
 8000a2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000a30:	46bd      	mov	sp, r7
 8000a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000a36:	bf00      	nop
 8000a38:	51eb851f 	.word	0x51eb851f

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0b      	blt.n	8000a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4907      	ldr	r1, [pc, #28]	; (8000a74 <__NVIC_EnableIRQ+0x38>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <main>:

void USART2_GPIO_Init(void);
void UART_Printf(char *format,...);

int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    USART2_GPIO_Init();
 8000a7c:	f000 f828 	bl	8000ad0 <USART2_GPIO_Init>
    USART_Init(USART2, 16E+6, 115200, 0);
 8000a80:	2300      	movs	r3, #0
 8000a82:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <main+0x44>)
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <main+0x48>)
 8000a8a:	f7ff fd7b 	bl	8000584 <USART_Init>
    //habilitar interrupcion
    //parte local del periferico
    //USART2->CR1 |= USART_CR1_TXEIE | USART_CR1_RXNEIE; //habilitar interrupcion por transmision y recepcion

    //Parte NVIC (arquitectura ARM)
    NVIC_EnableIRQ(USART2_IRQn); //habilitar interrupciones de usart2
 8000a8e:	2026      	movs	r0, #38	; 0x26
 8000a90:	f7ff ffd4 	bl	8000a3c <__NVIC_EnableIRQ>

/************************TX interrupt***********************************/
    sprintf((char*)txbuffer,"hola mundo IT\n\r");
 8000a94:	490b      	ldr	r1, [pc, #44]	; (8000ac4 <main+0x4c>)
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <main+0x50>)
 8000a98:	f000 f93a 	bl	8000d10 <siprintf>
    USART2 -> CR1 |= USART_CR1_TXEIE;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <main+0x48>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <main+0x48>)
 8000aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa6:	60d3      	str	r3, [r2, #12]

/************************RX interrupt***********************************/
    usart2.pUSARTx = USART2; //instancia de la estructura
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <main+0x54>)
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <main+0x48>)
 8000aac:	601a      	str	r2, [r3, #0]

    //USART_IRQInterruptConfig(USART2_IRQn, ENABLE); //habilitando las interrupciones por RX
    //USART_IRQPriorityConfig(USART2_IRQn,1);
    USART2 -> CR1 |= USART_CR1_RXNEIE;
 8000aae:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <main+0x48>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <main+0x48>)
 8000ab4:	f043 0320 	orr.w	r3, r3, #32
 8000ab8:	60d3      	str	r3, [r2, #12]
	/* Loop forever */
	for(;;);
 8000aba:	e7fe      	b.n	8000aba <main+0x42>
 8000abc:	00f42400 	.word	0x00f42400
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	08001604 	.word	0x08001604
 8000ac8:	20000080 	.word	0x20000080
 8000acc:	200000b4 	.word	0x200000b4

08000ad0 <USART2_GPIO_Init>:
}

void USART2_GPIO_Init(void){
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= GPIOX_CLOCK(USART2_TX);
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <USART2_GPIO_Init+0x84>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <USART2_GPIO_Init+0x84>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	6313      	str	r3, [r2, #48]	; 0x30
	//PA2 -> TX
	GPIOX_MODER(MODE_ALTER, USART2_TX);   	//pin PA2 modo funcion alternativa
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ae8:	4a1b      	ldr	r2, [pc, #108]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000aea:	f043 0320 	orr.w	r3, r3, #32
 8000aee:	6013      	str	r3, [r2, #0]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH,USART2_TX); //pin alta velocidad
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000af2:	689b      	ldr	r3, [r3, #8]
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000af6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000afa:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL2); //Limpiar los bits de funcion alternativa
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000afe:	6a1b      	ldr	r3, [r3, #32]
 8000b00:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b06:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7U << 8U); //PA2 modo funcion alternativa para usarlo como USART2_TX (ver datasheet)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b0a:	6a1b      	ldr	r3, [r3, #32]
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b12:	6213      	str	r3, [r2, #32]
	//GPIOA->MODER |= 0x7U << 8; //PA2 modo funcion alternativa para usarlo como USART2_TX (ver datasheet)

	//PA3 -> RX
	GPIOX_MODER(MODE_ALTER, USART2_RX);   	//pin PA2 modo funcion alternativa
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b22:	6013      	str	r3, [r2, #0]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH,USART2_RX); //pin alta velocidad
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b2e:	6093      	str	r3, [r2, #8]
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFRL3); //Limpiar los bits de funcion alternativa
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000b3a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x7U << 12U); //PA2 modo funcion alternativa para usarlo como USART2_RX (ver datasheet)
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <USART2_GPIO_Init+0x88>)
 8000b42:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000b46:	6213      	str	r3, [r2, #32]
	//GPIOX_AFR(7U,USART2_RX);
	return;
 8000b48:	bf00      	nop
}
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000

08000b5c <USART2_IRQHandler>:
		UART_Printf("Datos recibidos: %s\n\r",rxbuffer);
	}
}

/***************ISR****************************/
void USART2_IRQHandler(void){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
	if(USART2->SR & USART_SR_TXE){
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <USART2_IRQHandler+0x70>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d01b      	beq.n	8000ba6 <USART2_IRQHandler+0x4a>
		if(i<15){
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <USART2_IRQHandler+0x74>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	2b0e      	cmp	r3, #14
 8000b74:	d80d      	bhi.n	8000b92 <USART2_IRQHandler+0x36>
			USART2->DR = txbuffer[i]; //enviando un byte del buffer tx
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <USART2_IRQHandler+0x74>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <USART2_IRQHandler+0x78>)
 8000b7e:	5c9a      	ldrb	r2, [r3, r2]
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <USART2_IRQHandler+0x70>)
 8000b82:	605a      	str	r2, [r3, #4]
			i++;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <USART2_IRQHandler+0x74>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <USART2_IRQHandler+0x74>)
 8000b8e:	801a      	strh	r2, [r3, #0]
	}else if(USART2->SR & USART_SR_RXNE){
		uint8_t data;
		data = USART2->DR;
		USART2->DR = data;
	}
}
 8000b90:	e015      	b.n	8000bbe <USART2_IRQHandler+0x62>
			i=0;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <USART2_IRQHandler+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	801a      	strh	r2, [r3, #0]
			USART2->CR1 &= ~ USART_CR1_TXEIE; //desactiva las interrupcion de tx Usart2
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <USART2_IRQHandler+0x70>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <USART2_IRQHandler+0x70>)
 8000b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	e00b      	b.n	8000bbe <USART2_IRQHandler+0x62>
	}else if(USART2->SR & USART_SR_RXNE){
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <USART2_IRQHandler+0x70>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0320 	and.w	r3, r3, #32
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d005      	beq.n	8000bbe <USART2_IRQHandler+0x62>
		data = USART2->DR;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <USART2_IRQHandler+0x70>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	71fb      	strb	r3, [r7, #7]
		USART2->DR = data;
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <USART2_IRQHandler+0x70>)
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	6053      	str	r3, [r2, #4]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	200000b2 	.word	0x200000b2
 8000bd4:	20000080 	.word	0x20000080

08000bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be0:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <_sbrk+0x5c>)
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <_sbrk+0x60>)
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d102      	bne.n	8000bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <_sbrk+0x64>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <_sbrk+0x68>)
 8000bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <_sbrk+0x64>)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4413      	add	r3, r2
 8000c02:	693a      	ldr	r2, [r7, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d207      	bcs.n	8000c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c08:	f000 f858 	bl	8000cbc <__errno>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20018000 	.word	0x20018000
 8000c38:	00000400 	.word	0x00000400
 8000c3c:	200000cc 	.word	0x200000cc
 8000c40:	200000e0 	.word	0x200000e0

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c96:	f000 f817 	bl	8000cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff feed 	bl	8000a78 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   r0, =_estack
 8000ca0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000cac:	08001670 	.word	0x08001670
  ldr r2, =_sbss
 8000cb0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000cb4:	200000e0 	.word	0x200000e0

08000cb8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <__errno>:
 8000cbc:	4b01      	ldr	r3, [pc, #4]	; (8000cc4 <__errno+0x8>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <__libc_init_array>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	4d0d      	ldr	r5, [pc, #52]	; (8000d00 <__libc_init_array+0x38>)
 8000ccc:	4c0d      	ldr	r4, [pc, #52]	; (8000d04 <__libc_init_array+0x3c>)
 8000cce:	1b64      	subs	r4, r4, r5
 8000cd0:	10a4      	asrs	r4, r4, #2
 8000cd2:	2600      	movs	r6, #0
 8000cd4:	42a6      	cmp	r6, r4
 8000cd6:	d109      	bne.n	8000cec <__libc_init_array+0x24>
 8000cd8:	4d0b      	ldr	r5, [pc, #44]	; (8000d08 <__libc_init_array+0x40>)
 8000cda:	4c0c      	ldr	r4, [pc, #48]	; (8000d0c <__libc_init_array+0x44>)
 8000cdc:	f000 fc86 	bl	80015ec <_init>
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	10a4      	asrs	r4, r4, #2
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	42a6      	cmp	r6, r4
 8000ce8:	d105      	bne.n	8000cf6 <__libc_init_array+0x2e>
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf0:	4798      	blx	r3
 8000cf2:	3601      	adds	r6, #1
 8000cf4:	e7ee      	b.n	8000cd4 <__libc_init_array+0xc>
 8000cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfa:	4798      	blx	r3
 8000cfc:	3601      	adds	r6, #1
 8000cfe:	e7f2      	b.n	8000ce6 <__libc_init_array+0x1e>
 8000d00:	08001668 	.word	0x08001668
 8000d04:	08001668 	.word	0x08001668
 8000d08:	08001668 	.word	0x08001668
 8000d0c:	0800166c 	.word	0x0800166c

08000d10 <siprintf>:
 8000d10:	b40e      	push	{r1, r2, r3}
 8000d12:	b500      	push	{lr}
 8000d14:	b09c      	sub	sp, #112	; 0x70
 8000d16:	ab1d      	add	r3, sp, #116	; 0x74
 8000d18:	9002      	str	r0, [sp, #8]
 8000d1a:	9006      	str	r0, [sp, #24]
 8000d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <siprintf+0x38>)
 8000d22:	9107      	str	r1, [sp, #28]
 8000d24:	9104      	str	r1, [sp, #16]
 8000d26:	4909      	ldr	r1, [pc, #36]	; (8000d4c <siprintf+0x3c>)
 8000d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d2c:	9105      	str	r1, [sp, #20]
 8000d2e:	6800      	ldr	r0, [r0, #0]
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	a902      	add	r1, sp, #8
 8000d34:	f000 f868 	bl	8000e08 <_svfiprintf_r>
 8000d38:	9b02      	ldr	r3, [sp, #8]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	b01c      	add	sp, #112	; 0x70
 8000d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8000d44:	b003      	add	sp, #12
 8000d46:	4770      	bx	lr
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	ffff0208 	.word	0xffff0208

08000d50 <__ssputs_r>:
 8000d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d54:	688e      	ldr	r6, [r1, #8]
 8000d56:	429e      	cmp	r6, r3
 8000d58:	4682      	mov	sl, r0
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	461f      	mov	r7, r3
 8000d60:	d838      	bhi.n	8000dd4 <__ssputs_r+0x84>
 8000d62:	898a      	ldrh	r2, [r1, #12]
 8000d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d68:	d032      	beq.n	8000dd0 <__ssputs_r+0x80>
 8000d6a:	6825      	ldr	r5, [r4, #0]
 8000d6c:	6909      	ldr	r1, [r1, #16]
 8000d6e:	eba5 0901 	sub.w	r9, r5, r1
 8000d72:	6965      	ldr	r5, [r4, #20]
 8000d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	444b      	add	r3, r9
 8000d80:	106d      	asrs	r5, r5, #1
 8000d82:	429d      	cmp	r5, r3
 8000d84:	bf38      	it	cc
 8000d86:	461d      	movcc	r5, r3
 8000d88:	0553      	lsls	r3, r2, #21
 8000d8a:	d531      	bpl.n	8000df0 <__ssputs_r+0xa0>
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f000 fb63 	bl	8001458 <_malloc_r>
 8000d92:	4606      	mov	r6, r0
 8000d94:	b950      	cbnz	r0, 8000dac <__ssputs_r+0x5c>
 8000d96:	230c      	movs	r3, #12
 8000d98:	f8ca 3000 	str.w	r3, [sl]
 8000d9c:	89a3      	ldrh	r3, [r4, #12]
 8000d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da2:	81a3      	strh	r3, [r4, #12]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	6921      	ldr	r1, [r4, #16]
 8000dae:	464a      	mov	r2, r9
 8000db0:	f000 fabe 	bl	8001330 <memcpy>
 8000db4:	89a3      	ldrh	r3, [r4, #12]
 8000db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbe:	81a3      	strh	r3, [r4, #12]
 8000dc0:	6126      	str	r6, [r4, #16]
 8000dc2:	6165      	str	r5, [r4, #20]
 8000dc4:	444e      	add	r6, r9
 8000dc6:	eba5 0509 	sub.w	r5, r5, r9
 8000dca:	6026      	str	r6, [r4, #0]
 8000dcc:	60a5      	str	r5, [r4, #8]
 8000dce:	463e      	mov	r6, r7
 8000dd0:	42be      	cmp	r6, r7
 8000dd2:	d900      	bls.n	8000dd6 <__ssputs_r+0x86>
 8000dd4:	463e      	mov	r6, r7
 8000dd6:	6820      	ldr	r0, [r4, #0]
 8000dd8:	4632      	mov	r2, r6
 8000dda:	4641      	mov	r1, r8
 8000ddc:	f000 fab6 	bl	800134c <memmove>
 8000de0:	68a3      	ldr	r3, [r4, #8]
 8000de2:	1b9b      	subs	r3, r3, r6
 8000de4:	60a3      	str	r3, [r4, #8]
 8000de6:	6823      	ldr	r3, [r4, #0]
 8000de8:	4433      	add	r3, r6
 8000dea:	6023      	str	r3, [r4, #0]
 8000dec:	2000      	movs	r0, #0
 8000dee:	e7db      	b.n	8000da8 <__ssputs_r+0x58>
 8000df0:	462a      	mov	r2, r5
 8000df2:	f000 fba5 	bl	8001540 <_realloc_r>
 8000df6:	4606      	mov	r6, r0
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	d1e1      	bne.n	8000dc0 <__ssputs_r+0x70>
 8000dfc:	6921      	ldr	r1, [r4, #16]
 8000dfe:	4650      	mov	r0, sl
 8000e00:	f000 fabe 	bl	8001380 <_free_r>
 8000e04:	e7c7      	b.n	8000d96 <__ssputs_r+0x46>
	...

08000e08 <_svfiprintf_r>:
 8000e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e0c:	4698      	mov	r8, r3
 8000e0e:	898b      	ldrh	r3, [r1, #12]
 8000e10:	061b      	lsls	r3, r3, #24
 8000e12:	b09d      	sub	sp, #116	; 0x74
 8000e14:	4607      	mov	r7, r0
 8000e16:	460d      	mov	r5, r1
 8000e18:	4614      	mov	r4, r2
 8000e1a:	d50e      	bpl.n	8000e3a <_svfiprintf_r+0x32>
 8000e1c:	690b      	ldr	r3, [r1, #16]
 8000e1e:	b963      	cbnz	r3, 8000e3a <_svfiprintf_r+0x32>
 8000e20:	2140      	movs	r1, #64	; 0x40
 8000e22:	f000 fb19 	bl	8001458 <_malloc_r>
 8000e26:	6028      	str	r0, [r5, #0]
 8000e28:	6128      	str	r0, [r5, #16]
 8000e2a:	b920      	cbnz	r0, 8000e36 <_svfiprintf_r+0x2e>
 8000e2c:	230c      	movs	r3, #12
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	e0d1      	b.n	8000fda <_svfiprintf_r+0x1d2>
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	616b      	str	r3, [r5, #20]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8000e3e:	2320      	movs	r3, #32
 8000e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e48:	2330      	movs	r3, #48	; 0x30
 8000e4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000ff4 <_svfiprintf_r+0x1ec>
 8000e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e52:	f04f 0901 	mov.w	r9, #1
 8000e56:	4623      	mov	r3, r4
 8000e58:	469a      	mov	sl, r3
 8000e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e5e:	b10a      	cbz	r2, 8000e64 <_svfiprintf_r+0x5c>
 8000e60:	2a25      	cmp	r2, #37	; 0x25
 8000e62:	d1f9      	bne.n	8000e58 <_svfiprintf_r+0x50>
 8000e64:	ebba 0b04 	subs.w	fp, sl, r4
 8000e68:	d00b      	beq.n	8000e82 <_svfiprintf_r+0x7a>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	4622      	mov	r2, r4
 8000e6e:	4629      	mov	r1, r5
 8000e70:	4638      	mov	r0, r7
 8000e72:	f7ff ff6d 	bl	8000d50 <__ssputs_r>
 8000e76:	3001      	adds	r0, #1
 8000e78:	f000 80aa 	beq.w	8000fd0 <_svfiprintf_r+0x1c8>
 8000e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e7e:	445a      	add	r2, fp
 8000e80:	9209      	str	r2, [sp, #36]	; 0x24
 8000e82:	f89a 3000 	ldrb.w	r3, [sl]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80a2 	beq.w	8000fd0 <_svfiprintf_r+0x1c8>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e96:	f10a 0a01 	add.w	sl, sl, #1
 8000e9a:	9304      	str	r3, [sp, #16]
 8000e9c:	9307      	str	r3, [sp, #28]
 8000e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8000ea4:	4654      	mov	r4, sl
 8000ea6:	2205      	movs	r2, #5
 8000ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eac:	4851      	ldr	r0, [pc, #324]	; (8000ff4 <_svfiprintf_r+0x1ec>)
 8000eae:	f7ff f997 	bl	80001e0 <memchr>
 8000eb2:	9a04      	ldr	r2, [sp, #16]
 8000eb4:	b9d8      	cbnz	r0, 8000eee <_svfiprintf_r+0xe6>
 8000eb6:	06d0      	lsls	r0, r2, #27
 8000eb8:	bf44      	itt	mi
 8000eba:	2320      	movmi	r3, #32
 8000ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ec0:	0711      	lsls	r1, r2, #28
 8000ec2:	bf44      	itt	mi
 8000ec4:	232b      	movmi	r3, #43	; 0x2b
 8000ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000eca:	f89a 3000 	ldrb.w	r3, [sl]
 8000ece:	2b2a      	cmp	r3, #42	; 0x2a
 8000ed0:	d015      	beq.n	8000efe <_svfiprintf_r+0xf6>
 8000ed2:	9a07      	ldr	r2, [sp, #28]
 8000ed4:	4654      	mov	r4, sl
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f04f 0c0a 	mov.w	ip, #10
 8000edc:	4621      	mov	r1, r4
 8000ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ee2:	3b30      	subs	r3, #48	; 0x30
 8000ee4:	2b09      	cmp	r3, #9
 8000ee6:	d94e      	bls.n	8000f86 <_svfiprintf_r+0x17e>
 8000ee8:	b1b0      	cbz	r0, 8000f18 <_svfiprintf_r+0x110>
 8000eea:	9207      	str	r2, [sp, #28]
 8000eec:	e014      	b.n	8000f18 <_svfiprintf_r+0x110>
 8000eee:	eba0 0308 	sub.w	r3, r0, r8
 8000ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	9304      	str	r3, [sp, #16]
 8000efa:	46a2      	mov	sl, r4
 8000efc:	e7d2      	b.n	8000ea4 <_svfiprintf_r+0x9c>
 8000efe:	9b03      	ldr	r3, [sp, #12]
 8000f00:	1d19      	adds	r1, r3, #4
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	9103      	str	r1, [sp, #12]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bfbb      	ittet	lt
 8000f0a:	425b      	neglt	r3, r3
 8000f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8000f10:	9307      	strge	r3, [sp, #28]
 8000f12:	9307      	strlt	r3, [sp, #28]
 8000f14:	bfb8      	it	lt
 8000f16:	9204      	strlt	r2, [sp, #16]
 8000f18:	7823      	ldrb	r3, [r4, #0]
 8000f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8000f1c:	d10c      	bne.n	8000f38 <_svfiprintf_r+0x130>
 8000f1e:	7863      	ldrb	r3, [r4, #1]
 8000f20:	2b2a      	cmp	r3, #42	; 0x2a
 8000f22:	d135      	bne.n	8000f90 <_svfiprintf_r+0x188>
 8000f24:	9b03      	ldr	r3, [sp, #12]
 8000f26:	1d1a      	adds	r2, r3, #4
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	9203      	str	r2, [sp, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	bfb8      	it	lt
 8000f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f34:	3402      	adds	r4, #2
 8000f36:	9305      	str	r3, [sp, #20]
 8000f38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001004 <_svfiprintf_r+0x1fc>
 8000f3c:	7821      	ldrb	r1, [r4, #0]
 8000f3e:	2203      	movs	r2, #3
 8000f40:	4650      	mov	r0, sl
 8000f42:	f7ff f94d 	bl	80001e0 <memchr>
 8000f46:	b140      	cbz	r0, 8000f5a <_svfiprintf_r+0x152>
 8000f48:	2340      	movs	r3, #64	; 0x40
 8000f4a:	eba0 000a 	sub.w	r0, r0, sl
 8000f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8000f52:	9b04      	ldr	r3, [sp, #16]
 8000f54:	4303      	orrs	r3, r0
 8000f56:	3401      	adds	r4, #1
 8000f58:	9304      	str	r3, [sp, #16]
 8000f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f5e:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <_svfiprintf_r+0x1f0>)
 8000f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f64:	2206      	movs	r2, #6
 8000f66:	f7ff f93b 	bl	80001e0 <memchr>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d038      	beq.n	8000fe0 <_svfiprintf_r+0x1d8>
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <_svfiprintf_r+0x1f4>)
 8000f70:	bb1b      	cbnz	r3, 8000fba <_svfiprintf_r+0x1b2>
 8000f72:	9b03      	ldr	r3, [sp, #12]
 8000f74:	3307      	adds	r3, #7
 8000f76:	f023 0307 	bic.w	r3, r3, #7
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	9303      	str	r3, [sp, #12]
 8000f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f80:	4433      	add	r3, r6
 8000f82:	9309      	str	r3, [sp, #36]	; 0x24
 8000f84:	e767      	b.n	8000e56 <_svfiprintf_r+0x4e>
 8000f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f8a:	460c      	mov	r4, r1
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e7a5      	b.n	8000edc <_svfiprintf_r+0xd4>
 8000f90:	2300      	movs	r3, #0
 8000f92:	3401      	adds	r4, #1
 8000f94:	9305      	str	r3, [sp, #20]
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 0c0a 	mov.w	ip, #10
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fa2:	3a30      	subs	r2, #48	; 0x30
 8000fa4:	2a09      	cmp	r2, #9
 8000fa6:	d903      	bls.n	8000fb0 <_svfiprintf_r+0x1a8>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0c5      	beq.n	8000f38 <_svfiprintf_r+0x130>
 8000fac:	9105      	str	r1, [sp, #20]
 8000fae:	e7c3      	b.n	8000f38 <_svfiprintf_r+0x130>
 8000fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e7f0      	b.n	8000f9c <_svfiprintf_r+0x194>
 8000fba:	ab03      	add	r3, sp, #12
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <_svfiprintf_r+0x1f8>)
 8000fc2:	a904      	add	r1, sp, #16
 8000fc4:	4638      	mov	r0, r7
 8000fc6:	f3af 8000 	nop.w
 8000fca:	1c42      	adds	r2, r0, #1
 8000fcc:	4606      	mov	r6, r0
 8000fce:	d1d6      	bne.n	8000f7e <_svfiprintf_r+0x176>
 8000fd0:	89ab      	ldrh	r3, [r5, #12]
 8000fd2:	065b      	lsls	r3, r3, #25
 8000fd4:	f53f af2c 	bmi.w	8000e30 <_svfiprintf_r+0x28>
 8000fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000fda:	b01d      	add	sp, #116	; 0x74
 8000fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fe0:	ab03      	add	r3, sp, #12
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	462a      	mov	r2, r5
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <_svfiprintf_r+0x1f8>)
 8000fe8:	a904      	add	r1, sp, #16
 8000fea:	4638      	mov	r0, r7
 8000fec:	f000 f87a 	bl	80010e4 <_printf_i>
 8000ff0:	e7eb      	b.n	8000fca <_svfiprintf_r+0x1c2>
 8000ff2:	bf00      	nop
 8000ff4:	0800162a 	.word	0x0800162a
 8000ff8:	08001634 	.word	0x08001634
 8000ffc:	00000000 	.word	0x00000000
 8001000:	08000d51 	.word	0x08000d51
 8001004:	08001630 	.word	0x08001630

08001008 <_printf_common>:
 8001008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800100c:	4616      	mov	r6, r2
 800100e:	4699      	mov	r9, r3
 8001010:	688a      	ldr	r2, [r1, #8]
 8001012:	690b      	ldr	r3, [r1, #16]
 8001014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001018:	4293      	cmp	r3, r2
 800101a:	bfb8      	it	lt
 800101c:	4613      	movlt	r3, r2
 800101e:	6033      	str	r3, [r6, #0]
 8001020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001024:	4607      	mov	r7, r0
 8001026:	460c      	mov	r4, r1
 8001028:	b10a      	cbz	r2, 800102e <_printf_common+0x26>
 800102a:	3301      	adds	r3, #1
 800102c:	6033      	str	r3, [r6, #0]
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	0699      	lsls	r1, r3, #26
 8001032:	bf42      	ittt	mi
 8001034:	6833      	ldrmi	r3, [r6, #0]
 8001036:	3302      	addmi	r3, #2
 8001038:	6033      	strmi	r3, [r6, #0]
 800103a:	6825      	ldr	r5, [r4, #0]
 800103c:	f015 0506 	ands.w	r5, r5, #6
 8001040:	d106      	bne.n	8001050 <_printf_common+0x48>
 8001042:	f104 0a19 	add.w	sl, r4, #25
 8001046:	68e3      	ldr	r3, [r4, #12]
 8001048:	6832      	ldr	r2, [r6, #0]
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	42ab      	cmp	r3, r5
 800104e:	dc26      	bgt.n	800109e <_printf_common+0x96>
 8001050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001054:	1e13      	subs	r3, r2, #0
 8001056:	6822      	ldr	r2, [r4, #0]
 8001058:	bf18      	it	ne
 800105a:	2301      	movne	r3, #1
 800105c:	0692      	lsls	r2, r2, #26
 800105e:	d42b      	bmi.n	80010b8 <_printf_common+0xb0>
 8001060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001064:	4649      	mov	r1, r9
 8001066:	4638      	mov	r0, r7
 8001068:	47c0      	blx	r8
 800106a:	3001      	adds	r0, #1
 800106c:	d01e      	beq.n	80010ac <_printf_common+0xa4>
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	68e5      	ldr	r5, [r4, #12]
 8001072:	6832      	ldr	r2, [r6, #0]
 8001074:	f003 0306 	and.w	r3, r3, #6
 8001078:	2b04      	cmp	r3, #4
 800107a:	bf08      	it	eq
 800107c:	1aad      	subeq	r5, r5, r2
 800107e:	68a3      	ldr	r3, [r4, #8]
 8001080:	6922      	ldr	r2, [r4, #16]
 8001082:	bf0c      	ite	eq
 8001084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001088:	2500      	movne	r5, #0
 800108a:	4293      	cmp	r3, r2
 800108c:	bfc4      	itt	gt
 800108e:	1a9b      	subgt	r3, r3, r2
 8001090:	18ed      	addgt	r5, r5, r3
 8001092:	2600      	movs	r6, #0
 8001094:	341a      	adds	r4, #26
 8001096:	42b5      	cmp	r5, r6
 8001098:	d11a      	bne.n	80010d0 <_printf_common+0xc8>
 800109a:	2000      	movs	r0, #0
 800109c:	e008      	b.n	80010b0 <_printf_common+0xa8>
 800109e:	2301      	movs	r3, #1
 80010a0:	4652      	mov	r2, sl
 80010a2:	4649      	mov	r1, r9
 80010a4:	4638      	mov	r0, r7
 80010a6:	47c0      	blx	r8
 80010a8:	3001      	adds	r0, #1
 80010aa:	d103      	bne.n	80010b4 <_printf_common+0xac>
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b4:	3501      	adds	r5, #1
 80010b6:	e7c6      	b.n	8001046 <_printf_common+0x3e>
 80010b8:	18e1      	adds	r1, r4, r3
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	2030      	movs	r0, #48	; 0x30
 80010be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80010c2:	4422      	add	r2, r4
 80010c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80010c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80010cc:	3302      	adds	r3, #2
 80010ce:	e7c7      	b.n	8001060 <_printf_common+0x58>
 80010d0:	2301      	movs	r3, #1
 80010d2:	4622      	mov	r2, r4
 80010d4:	4649      	mov	r1, r9
 80010d6:	4638      	mov	r0, r7
 80010d8:	47c0      	blx	r8
 80010da:	3001      	adds	r0, #1
 80010dc:	d0e6      	beq.n	80010ac <_printf_common+0xa4>
 80010de:	3601      	adds	r6, #1
 80010e0:	e7d9      	b.n	8001096 <_printf_common+0x8e>
	...

080010e4 <_printf_i>:
 80010e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010e8:	7e0f      	ldrb	r7, [r1, #24]
 80010ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80010ec:	2f78      	cmp	r7, #120	; 0x78
 80010ee:	4691      	mov	r9, r2
 80010f0:	4680      	mov	r8, r0
 80010f2:	460c      	mov	r4, r1
 80010f4:	469a      	mov	sl, r3
 80010f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80010fa:	d807      	bhi.n	800110c <_printf_i+0x28>
 80010fc:	2f62      	cmp	r7, #98	; 0x62
 80010fe:	d80a      	bhi.n	8001116 <_printf_i+0x32>
 8001100:	2f00      	cmp	r7, #0
 8001102:	f000 80d8 	beq.w	80012b6 <_printf_i+0x1d2>
 8001106:	2f58      	cmp	r7, #88	; 0x58
 8001108:	f000 80a3 	beq.w	8001252 <_printf_i+0x16e>
 800110c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001114:	e03a      	b.n	800118c <_printf_i+0xa8>
 8001116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800111a:	2b15      	cmp	r3, #21
 800111c:	d8f6      	bhi.n	800110c <_printf_i+0x28>
 800111e:	a101      	add	r1, pc, #4	; (adr r1, 8001124 <_printf_i+0x40>)
 8001120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001124:	0800117d 	.word	0x0800117d
 8001128:	08001191 	.word	0x08001191
 800112c:	0800110d 	.word	0x0800110d
 8001130:	0800110d 	.word	0x0800110d
 8001134:	0800110d 	.word	0x0800110d
 8001138:	0800110d 	.word	0x0800110d
 800113c:	08001191 	.word	0x08001191
 8001140:	0800110d 	.word	0x0800110d
 8001144:	0800110d 	.word	0x0800110d
 8001148:	0800110d 	.word	0x0800110d
 800114c:	0800110d 	.word	0x0800110d
 8001150:	0800129d 	.word	0x0800129d
 8001154:	080011c1 	.word	0x080011c1
 8001158:	0800127f 	.word	0x0800127f
 800115c:	0800110d 	.word	0x0800110d
 8001160:	0800110d 	.word	0x0800110d
 8001164:	080012bf 	.word	0x080012bf
 8001168:	0800110d 	.word	0x0800110d
 800116c:	080011c1 	.word	0x080011c1
 8001170:	0800110d 	.word	0x0800110d
 8001174:	0800110d 	.word	0x0800110d
 8001178:	08001287 	.word	0x08001287
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	1d1a      	adds	r2, r3, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	602a      	str	r2, [r5, #0]
 8001184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800118c:	2301      	movs	r3, #1
 800118e:	e0a3      	b.n	80012d8 <_printf_i+0x1f4>
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	6829      	ldr	r1, [r5, #0]
 8001194:	0606      	lsls	r6, r0, #24
 8001196:	f101 0304 	add.w	r3, r1, #4
 800119a:	d50a      	bpl.n	80011b2 <_printf_i+0xce>
 800119c:	680e      	ldr	r6, [r1, #0]
 800119e:	602b      	str	r3, [r5, #0]
 80011a0:	2e00      	cmp	r6, #0
 80011a2:	da03      	bge.n	80011ac <_printf_i+0xc8>
 80011a4:	232d      	movs	r3, #45	; 0x2d
 80011a6:	4276      	negs	r6, r6
 80011a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80011ac:	485e      	ldr	r0, [pc, #376]	; (8001328 <_printf_i+0x244>)
 80011ae:	230a      	movs	r3, #10
 80011b0:	e019      	b.n	80011e6 <_printf_i+0x102>
 80011b2:	680e      	ldr	r6, [r1, #0]
 80011b4:	602b      	str	r3, [r5, #0]
 80011b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80011ba:	bf18      	it	ne
 80011bc:	b236      	sxthne	r6, r6
 80011be:	e7ef      	b.n	80011a0 <_printf_i+0xbc>
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	6820      	ldr	r0, [r4, #0]
 80011c4:	1d19      	adds	r1, r3, #4
 80011c6:	6029      	str	r1, [r5, #0]
 80011c8:	0601      	lsls	r1, r0, #24
 80011ca:	d501      	bpl.n	80011d0 <_printf_i+0xec>
 80011cc:	681e      	ldr	r6, [r3, #0]
 80011ce:	e002      	b.n	80011d6 <_printf_i+0xf2>
 80011d0:	0646      	lsls	r6, r0, #25
 80011d2:	d5fb      	bpl.n	80011cc <_printf_i+0xe8>
 80011d4:	881e      	ldrh	r6, [r3, #0]
 80011d6:	4854      	ldr	r0, [pc, #336]	; (8001328 <_printf_i+0x244>)
 80011d8:	2f6f      	cmp	r7, #111	; 0x6f
 80011da:	bf0c      	ite	eq
 80011dc:	2308      	moveq	r3, #8
 80011de:	230a      	movne	r3, #10
 80011e0:	2100      	movs	r1, #0
 80011e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80011e6:	6865      	ldr	r5, [r4, #4]
 80011e8:	60a5      	str	r5, [r4, #8]
 80011ea:	2d00      	cmp	r5, #0
 80011ec:	bfa2      	ittt	ge
 80011ee:	6821      	ldrge	r1, [r4, #0]
 80011f0:	f021 0104 	bicge.w	r1, r1, #4
 80011f4:	6021      	strge	r1, [r4, #0]
 80011f6:	b90e      	cbnz	r6, 80011fc <_printf_i+0x118>
 80011f8:	2d00      	cmp	r5, #0
 80011fa:	d04d      	beq.n	8001298 <_printf_i+0x1b4>
 80011fc:	4615      	mov	r5, r2
 80011fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8001202:	fb03 6711 	mls	r7, r3, r1, r6
 8001206:	5dc7      	ldrb	r7, [r0, r7]
 8001208:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800120c:	4637      	mov	r7, r6
 800120e:	42bb      	cmp	r3, r7
 8001210:	460e      	mov	r6, r1
 8001212:	d9f4      	bls.n	80011fe <_printf_i+0x11a>
 8001214:	2b08      	cmp	r3, #8
 8001216:	d10b      	bne.n	8001230 <_printf_i+0x14c>
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	07de      	lsls	r6, r3, #31
 800121c:	d508      	bpl.n	8001230 <_printf_i+0x14c>
 800121e:	6923      	ldr	r3, [r4, #16]
 8001220:	6861      	ldr	r1, [r4, #4]
 8001222:	4299      	cmp	r1, r3
 8001224:	bfde      	ittt	le
 8001226:	2330      	movle	r3, #48	; 0x30
 8001228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800122c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001230:	1b52      	subs	r2, r2, r5
 8001232:	6122      	str	r2, [r4, #16]
 8001234:	f8cd a000 	str.w	sl, [sp]
 8001238:	464b      	mov	r3, r9
 800123a:	aa03      	add	r2, sp, #12
 800123c:	4621      	mov	r1, r4
 800123e:	4640      	mov	r0, r8
 8001240:	f7ff fee2 	bl	8001008 <_printf_common>
 8001244:	3001      	adds	r0, #1
 8001246:	d14c      	bne.n	80012e2 <_printf_i+0x1fe>
 8001248:	f04f 30ff 	mov.w	r0, #4294967295
 800124c:	b004      	add	sp, #16
 800124e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001252:	4835      	ldr	r0, [pc, #212]	; (8001328 <_printf_i+0x244>)
 8001254:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001258:	6829      	ldr	r1, [r5, #0]
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001260:	6029      	str	r1, [r5, #0]
 8001262:	061d      	lsls	r5, r3, #24
 8001264:	d514      	bpl.n	8001290 <_printf_i+0x1ac>
 8001266:	07df      	lsls	r7, r3, #31
 8001268:	bf44      	itt	mi
 800126a:	f043 0320 	orrmi.w	r3, r3, #32
 800126e:	6023      	strmi	r3, [r4, #0]
 8001270:	b91e      	cbnz	r6, 800127a <_printf_i+0x196>
 8001272:	6823      	ldr	r3, [r4, #0]
 8001274:	f023 0320 	bic.w	r3, r3, #32
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	2310      	movs	r3, #16
 800127c:	e7b0      	b.n	80011e0 <_printf_i+0xfc>
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	6023      	str	r3, [r4, #0]
 8001286:	2378      	movs	r3, #120	; 0x78
 8001288:	4828      	ldr	r0, [pc, #160]	; (800132c <_printf_i+0x248>)
 800128a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800128e:	e7e3      	b.n	8001258 <_printf_i+0x174>
 8001290:	0659      	lsls	r1, r3, #25
 8001292:	bf48      	it	mi
 8001294:	b2b6      	uxthmi	r6, r6
 8001296:	e7e6      	b.n	8001266 <_printf_i+0x182>
 8001298:	4615      	mov	r5, r2
 800129a:	e7bb      	b.n	8001214 <_printf_i+0x130>
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	6826      	ldr	r6, [r4, #0]
 80012a0:	6961      	ldr	r1, [r4, #20]
 80012a2:	1d18      	adds	r0, r3, #4
 80012a4:	6028      	str	r0, [r5, #0]
 80012a6:	0635      	lsls	r5, r6, #24
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	d501      	bpl.n	80012b0 <_printf_i+0x1cc>
 80012ac:	6019      	str	r1, [r3, #0]
 80012ae:	e002      	b.n	80012b6 <_printf_i+0x1d2>
 80012b0:	0670      	lsls	r0, r6, #25
 80012b2:	d5fb      	bpl.n	80012ac <_printf_i+0x1c8>
 80012b4:	8019      	strh	r1, [r3, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	6123      	str	r3, [r4, #16]
 80012ba:	4615      	mov	r5, r2
 80012bc:	e7ba      	b.n	8001234 <_printf_i+0x150>
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	1d1a      	adds	r2, r3, #4
 80012c2:	602a      	str	r2, [r5, #0]
 80012c4:	681d      	ldr	r5, [r3, #0]
 80012c6:	6862      	ldr	r2, [r4, #4]
 80012c8:	2100      	movs	r1, #0
 80012ca:	4628      	mov	r0, r5
 80012cc:	f7fe ff88 	bl	80001e0 <memchr>
 80012d0:	b108      	cbz	r0, 80012d6 <_printf_i+0x1f2>
 80012d2:	1b40      	subs	r0, r0, r5
 80012d4:	6060      	str	r0, [r4, #4]
 80012d6:	6863      	ldr	r3, [r4, #4]
 80012d8:	6123      	str	r3, [r4, #16]
 80012da:	2300      	movs	r3, #0
 80012dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012e0:	e7a8      	b.n	8001234 <_printf_i+0x150>
 80012e2:	6923      	ldr	r3, [r4, #16]
 80012e4:	462a      	mov	r2, r5
 80012e6:	4649      	mov	r1, r9
 80012e8:	4640      	mov	r0, r8
 80012ea:	47d0      	blx	sl
 80012ec:	3001      	adds	r0, #1
 80012ee:	d0ab      	beq.n	8001248 <_printf_i+0x164>
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	079b      	lsls	r3, r3, #30
 80012f4:	d413      	bmi.n	800131e <_printf_i+0x23a>
 80012f6:	68e0      	ldr	r0, [r4, #12]
 80012f8:	9b03      	ldr	r3, [sp, #12]
 80012fa:	4298      	cmp	r0, r3
 80012fc:	bfb8      	it	lt
 80012fe:	4618      	movlt	r0, r3
 8001300:	e7a4      	b.n	800124c <_printf_i+0x168>
 8001302:	2301      	movs	r3, #1
 8001304:	4632      	mov	r2, r6
 8001306:	4649      	mov	r1, r9
 8001308:	4640      	mov	r0, r8
 800130a:	47d0      	blx	sl
 800130c:	3001      	adds	r0, #1
 800130e:	d09b      	beq.n	8001248 <_printf_i+0x164>
 8001310:	3501      	adds	r5, #1
 8001312:	68e3      	ldr	r3, [r4, #12]
 8001314:	9903      	ldr	r1, [sp, #12]
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	42ab      	cmp	r3, r5
 800131a:	dcf2      	bgt.n	8001302 <_printf_i+0x21e>
 800131c:	e7eb      	b.n	80012f6 <_printf_i+0x212>
 800131e:	2500      	movs	r5, #0
 8001320:	f104 0619 	add.w	r6, r4, #25
 8001324:	e7f5      	b.n	8001312 <_printf_i+0x22e>
 8001326:	bf00      	nop
 8001328:	0800163b 	.word	0x0800163b
 800132c:	0800164c 	.word	0x0800164c

08001330 <memcpy>:
 8001330:	440a      	add	r2, r1
 8001332:	4291      	cmp	r1, r2
 8001334:	f100 33ff 	add.w	r3, r0, #4294967295
 8001338:	d100      	bne.n	800133c <memcpy+0xc>
 800133a:	4770      	bx	lr
 800133c:	b510      	push	{r4, lr}
 800133e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001346:	4291      	cmp	r1, r2
 8001348:	d1f9      	bne.n	800133e <memcpy+0xe>
 800134a:	bd10      	pop	{r4, pc}

0800134c <memmove>:
 800134c:	4288      	cmp	r0, r1
 800134e:	b510      	push	{r4, lr}
 8001350:	eb01 0402 	add.w	r4, r1, r2
 8001354:	d902      	bls.n	800135c <memmove+0x10>
 8001356:	4284      	cmp	r4, r0
 8001358:	4623      	mov	r3, r4
 800135a:	d807      	bhi.n	800136c <memmove+0x20>
 800135c:	1e43      	subs	r3, r0, #1
 800135e:	42a1      	cmp	r1, r4
 8001360:	d008      	beq.n	8001374 <memmove+0x28>
 8001362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800136a:	e7f8      	b.n	800135e <memmove+0x12>
 800136c:	4402      	add	r2, r0
 800136e:	4601      	mov	r1, r0
 8001370:	428a      	cmp	r2, r1
 8001372:	d100      	bne.n	8001376 <memmove+0x2a>
 8001374:	bd10      	pop	{r4, pc}
 8001376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800137a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800137e:	e7f7      	b.n	8001370 <memmove+0x24>

08001380 <_free_r>:
 8001380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001382:	2900      	cmp	r1, #0
 8001384:	d044      	beq.n	8001410 <_free_r+0x90>
 8001386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800138a:	9001      	str	r0, [sp, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	f1a1 0404 	sub.w	r4, r1, #4
 8001392:	bfb8      	it	lt
 8001394:	18e4      	addlt	r4, r4, r3
 8001396:	f000 f913 	bl	80015c0 <__malloc_lock>
 800139a:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <_free_r+0x94>)
 800139c:	9801      	ldr	r0, [sp, #4]
 800139e:	6813      	ldr	r3, [r2, #0]
 80013a0:	b933      	cbnz	r3, 80013b0 <_free_r+0x30>
 80013a2:	6063      	str	r3, [r4, #4]
 80013a4:	6014      	str	r4, [r2, #0]
 80013a6:	b003      	add	sp, #12
 80013a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80013ac:	f000 b90e 	b.w	80015cc <__malloc_unlock>
 80013b0:	42a3      	cmp	r3, r4
 80013b2:	d908      	bls.n	80013c6 <_free_r+0x46>
 80013b4:	6825      	ldr	r5, [r4, #0]
 80013b6:	1961      	adds	r1, r4, r5
 80013b8:	428b      	cmp	r3, r1
 80013ba:	bf01      	itttt	eq
 80013bc:	6819      	ldreq	r1, [r3, #0]
 80013be:	685b      	ldreq	r3, [r3, #4]
 80013c0:	1949      	addeq	r1, r1, r5
 80013c2:	6021      	streq	r1, [r4, #0]
 80013c4:	e7ed      	b.n	80013a2 <_free_r+0x22>
 80013c6:	461a      	mov	r2, r3
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	b10b      	cbz	r3, 80013d0 <_free_r+0x50>
 80013cc:	42a3      	cmp	r3, r4
 80013ce:	d9fa      	bls.n	80013c6 <_free_r+0x46>
 80013d0:	6811      	ldr	r1, [r2, #0]
 80013d2:	1855      	adds	r5, r2, r1
 80013d4:	42a5      	cmp	r5, r4
 80013d6:	d10b      	bne.n	80013f0 <_free_r+0x70>
 80013d8:	6824      	ldr	r4, [r4, #0]
 80013da:	4421      	add	r1, r4
 80013dc:	1854      	adds	r4, r2, r1
 80013de:	42a3      	cmp	r3, r4
 80013e0:	6011      	str	r1, [r2, #0]
 80013e2:	d1e0      	bne.n	80013a6 <_free_r+0x26>
 80013e4:	681c      	ldr	r4, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	6053      	str	r3, [r2, #4]
 80013ea:	4421      	add	r1, r4
 80013ec:	6011      	str	r1, [r2, #0]
 80013ee:	e7da      	b.n	80013a6 <_free_r+0x26>
 80013f0:	d902      	bls.n	80013f8 <_free_r+0x78>
 80013f2:	230c      	movs	r3, #12
 80013f4:	6003      	str	r3, [r0, #0]
 80013f6:	e7d6      	b.n	80013a6 <_free_r+0x26>
 80013f8:	6825      	ldr	r5, [r4, #0]
 80013fa:	1961      	adds	r1, r4, r5
 80013fc:	428b      	cmp	r3, r1
 80013fe:	bf04      	itt	eq
 8001400:	6819      	ldreq	r1, [r3, #0]
 8001402:	685b      	ldreq	r3, [r3, #4]
 8001404:	6063      	str	r3, [r4, #4]
 8001406:	bf04      	itt	eq
 8001408:	1949      	addeq	r1, r1, r5
 800140a:	6021      	streq	r1, [r4, #0]
 800140c:	6054      	str	r4, [r2, #4]
 800140e:	e7ca      	b.n	80013a6 <_free_r+0x26>
 8001410:	b003      	add	sp, #12
 8001412:	bd30      	pop	{r4, r5, pc}
 8001414:	200000d0 	.word	0x200000d0

08001418 <sbrk_aligned>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	4e0e      	ldr	r6, [pc, #56]	; (8001454 <sbrk_aligned+0x3c>)
 800141c:	460c      	mov	r4, r1
 800141e:	6831      	ldr	r1, [r6, #0]
 8001420:	4605      	mov	r5, r0
 8001422:	b911      	cbnz	r1, 800142a <sbrk_aligned+0x12>
 8001424:	f000 f8bc 	bl	80015a0 <_sbrk_r>
 8001428:	6030      	str	r0, [r6, #0]
 800142a:	4621      	mov	r1, r4
 800142c:	4628      	mov	r0, r5
 800142e:	f000 f8b7 	bl	80015a0 <_sbrk_r>
 8001432:	1c43      	adds	r3, r0, #1
 8001434:	d00a      	beq.n	800144c <sbrk_aligned+0x34>
 8001436:	1cc4      	adds	r4, r0, #3
 8001438:	f024 0403 	bic.w	r4, r4, #3
 800143c:	42a0      	cmp	r0, r4
 800143e:	d007      	beq.n	8001450 <sbrk_aligned+0x38>
 8001440:	1a21      	subs	r1, r4, r0
 8001442:	4628      	mov	r0, r5
 8001444:	f000 f8ac 	bl	80015a0 <_sbrk_r>
 8001448:	3001      	adds	r0, #1
 800144a:	d101      	bne.n	8001450 <sbrk_aligned+0x38>
 800144c:	f04f 34ff 	mov.w	r4, #4294967295
 8001450:	4620      	mov	r0, r4
 8001452:	bd70      	pop	{r4, r5, r6, pc}
 8001454:	200000d4 	.word	0x200000d4

08001458 <_malloc_r>:
 8001458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800145c:	1ccd      	adds	r5, r1, #3
 800145e:	f025 0503 	bic.w	r5, r5, #3
 8001462:	3508      	adds	r5, #8
 8001464:	2d0c      	cmp	r5, #12
 8001466:	bf38      	it	cc
 8001468:	250c      	movcc	r5, #12
 800146a:	2d00      	cmp	r5, #0
 800146c:	4607      	mov	r7, r0
 800146e:	db01      	blt.n	8001474 <_malloc_r+0x1c>
 8001470:	42a9      	cmp	r1, r5
 8001472:	d905      	bls.n	8001480 <_malloc_r+0x28>
 8001474:	230c      	movs	r3, #12
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	2600      	movs	r6, #0
 800147a:	4630      	mov	r0, r6
 800147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001480:	4e2e      	ldr	r6, [pc, #184]	; (800153c <_malloc_r+0xe4>)
 8001482:	f000 f89d 	bl	80015c0 <__malloc_lock>
 8001486:	6833      	ldr	r3, [r6, #0]
 8001488:	461c      	mov	r4, r3
 800148a:	bb34      	cbnz	r4, 80014da <_malloc_r+0x82>
 800148c:	4629      	mov	r1, r5
 800148e:	4638      	mov	r0, r7
 8001490:	f7ff ffc2 	bl	8001418 <sbrk_aligned>
 8001494:	1c43      	adds	r3, r0, #1
 8001496:	4604      	mov	r4, r0
 8001498:	d14d      	bne.n	8001536 <_malloc_r+0xde>
 800149a:	6834      	ldr	r4, [r6, #0]
 800149c:	4626      	mov	r6, r4
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d140      	bne.n	8001524 <_malloc_r+0xcc>
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	4631      	mov	r1, r6
 80014a6:	4638      	mov	r0, r7
 80014a8:	eb04 0803 	add.w	r8, r4, r3
 80014ac:	f000 f878 	bl	80015a0 <_sbrk_r>
 80014b0:	4580      	cmp	r8, r0
 80014b2:	d13a      	bne.n	800152a <_malloc_r+0xd2>
 80014b4:	6821      	ldr	r1, [r4, #0]
 80014b6:	3503      	adds	r5, #3
 80014b8:	1a6d      	subs	r5, r5, r1
 80014ba:	f025 0503 	bic.w	r5, r5, #3
 80014be:	3508      	adds	r5, #8
 80014c0:	2d0c      	cmp	r5, #12
 80014c2:	bf38      	it	cc
 80014c4:	250c      	movcc	r5, #12
 80014c6:	4629      	mov	r1, r5
 80014c8:	4638      	mov	r0, r7
 80014ca:	f7ff ffa5 	bl	8001418 <sbrk_aligned>
 80014ce:	3001      	adds	r0, #1
 80014d0:	d02b      	beq.n	800152a <_malloc_r+0xd2>
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	442b      	add	r3, r5
 80014d6:	6023      	str	r3, [r4, #0]
 80014d8:	e00e      	b.n	80014f8 <_malloc_r+0xa0>
 80014da:	6822      	ldr	r2, [r4, #0]
 80014dc:	1b52      	subs	r2, r2, r5
 80014de:	d41e      	bmi.n	800151e <_malloc_r+0xc6>
 80014e0:	2a0b      	cmp	r2, #11
 80014e2:	d916      	bls.n	8001512 <_malloc_r+0xba>
 80014e4:	1961      	adds	r1, r4, r5
 80014e6:	42a3      	cmp	r3, r4
 80014e8:	6025      	str	r5, [r4, #0]
 80014ea:	bf18      	it	ne
 80014ec:	6059      	strne	r1, [r3, #4]
 80014ee:	6863      	ldr	r3, [r4, #4]
 80014f0:	bf08      	it	eq
 80014f2:	6031      	streq	r1, [r6, #0]
 80014f4:	5162      	str	r2, [r4, r5]
 80014f6:	604b      	str	r3, [r1, #4]
 80014f8:	4638      	mov	r0, r7
 80014fa:	f104 060b 	add.w	r6, r4, #11
 80014fe:	f000 f865 	bl	80015cc <__malloc_unlock>
 8001502:	f026 0607 	bic.w	r6, r6, #7
 8001506:	1d23      	adds	r3, r4, #4
 8001508:	1af2      	subs	r2, r6, r3
 800150a:	d0b6      	beq.n	800147a <_malloc_r+0x22>
 800150c:	1b9b      	subs	r3, r3, r6
 800150e:	50a3      	str	r3, [r4, r2]
 8001510:	e7b3      	b.n	800147a <_malloc_r+0x22>
 8001512:	6862      	ldr	r2, [r4, #4]
 8001514:	42a3      	cmp	r3, r4
 8001516:	bf0c      	ite	eq
 8001518:	6032      	streq	r2, [r6, #0]
 800151a:	605a      	strne	r2, [r3, #4]
 800151c:	e7ec      	b.n	80014f8 <_malloc_r+0xa0>
 800151e:	4623      	mov	r3, r4
 8001520:	6864      	ldr	r4, [r4, #4]
 8001522:	e7b2      	b.n	800148a <_malloc_r+0x32>
 8001524:	4634      	mov	r4, r6
 8001526:	6876      	ldr	r6, [r6, #4]
 8001528:	e7b9      	b.n	800149e <_malloc_r+0x46>
 800152a:	230c      	movs	r3, #12
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	4638      	mov	r0, r7
 8001530:	f000 f84c 	bl	80015cc <__malloc_unlock>
 8001534:	e7a1      	b.n	800147a <_malloc_r+0x22>
 8001536:	6025      	str	r5, [r4, #0]
 8001538:	e7de      	b.n	80014f8 <_malloc_r+0xa0>
 800153a:	bf00      	nop
 800153c:	200000d0 	.word	0x200000d0

08001540 <_realloc_r>:
 8001540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001544:	4680      	mov	r8, r0
 8001546:	4614      	mov	r4, r2
 8001548:	460e      	mov	r6, r1
 800154a:	b921      	cbnz	r1, 8001556 <_realloc_r+0x16>
 800154c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001550:	4611      	mov	r1, r2
 8001552:	f7ff bf81 	b.w	8001458 <_malloc_r>
 8001556:	b92a      	cbnz	r2, 8001564 <_realloc_r+0x24>
 8001558:	f7ff ff12 	bl	8001380 <_free_r>
 800155c:	4625      	mov	r5, r4
 800155e:	4628      	mov	r0, r5
 8001560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001564:	f000 f838 	bl	80015d8 <_malloc_usable_size_r>
 8001568:	4284      	cmp	r4, r0
 800156a:	4607      	mov	r7, r0
 800156c:	d802      	bhi.n	8001574 <_realloc_r+0x34>
 800156e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001572:	d812      	bhi.n	800159a <_realloc_r+0x5a>
 8001574:	4621      	mov	r1, r4
 8001576:	4640      	mov	r0, r8
 8001578:	f7ff ff6e 	bl	8001458 <_malloc_r>
 800157c:	4605      	mov	r5, r0
 800157e:	2800      	cmp	r0, #0
 8001580:	d0ed      	beq.n	800155e <_realloc_r+0x1e>
 8001582:	42bc      	cmp	r4, r7
 8001584:	4622      	mov	r2, r4
 8001586:	4631      	mov	r1, r6
 8001588:	bf28      	it	cs
 800158a:	463a      	movcs	r2, r7
 800158c:	f7ff fed0 	bl	8001330 <memcpy>
 8001590:	4631      	mov	r1, r6
 8001592:	4640      	mov	r0, r8
 8001594:	f7ff fef4 	bl	8001380 <_free_r>
 8001598:	e7e1      	b.n	800155e <_realloc_r+0x1e>
 800159a:	4635      	mov	r5, r6
 800159c:	e7df      	b.n	800155e <_realloc_r+0x1e>
	...

080015a0 <_sbrk_r>:
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4d06      	ldr	r5, [pc, #24]	; (80015bc <_sbrk_r+0x1c>)
 80015a4:	2300      	movs	r3, #0
 80015a6:	4604      	mov	r4, r0
 80015a8:	4608      	mov	r0, r1
 80015aa:	602b      	str	r3, [r5, #0]
 80015ac:	f7ff fb14 	bl	8000bd8 <_sbrk>
 80015b0:	1c43      	adds	r3, r0, #1
 80015b2:	d102      	bne.n	80015ba <_sbrk_r+0x1a>
 80015b4:	682b      	ldr	r3, [r5, #0]
 80015b6:	b103      	cbz	r3, 80015ba <_sbrk_r+0x1a>
 80015b8:	6023      	str	r3, [r4, #0]
 80015ba:	bd38      	pop	{r3, r4, r5, pc}
 80015bc:	200000d8 	.word	0x200000d8

080015c0 <__malloc_lock>:
 80015c0:	4801      	ldr	r0, [pc, #4]	; (80015c8 <__malloc_lock+0x8>)
 80015c2:	f000 b811 	b.w	80015e8 <__retarget_lock_acquire_recursive>
 80015c6:	bf00      	nop
 80015c8:	200000dc 	.word	0x200000dc

080015cc <__malloc_unlock>:
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <__malloc_unlock+0x8>)
 80015ce:	f000 b80c 	b.w	80015ea <__retarget_lock_release_recursive>
 80015d2:	bf00      	nop
 80015d4:	200000dc 	.word	0x200000dc

080015d8 <_malloc_usable_size_r>:
 80015d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015dc:	1f18      	subs	r0, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bfbc      	itt	lt
 80015e2:	580b      	ldrlt	r3, [r1, r0]
 80015e4:	18c0      	addlt	r0, r0, r3
 80015e6:	4770      	bx	lr

080015e8 <__retarget_lock_acquire_recursive>:
 80015e8:	4770      	bx	lr

080015ea <__retarget_lock_release_recursive>:
 80015ea:	4770      	bx	lr

080015ec <_init>:
 80015ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ee:	bf00      	nop
 80015f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015f2:	bc08      	pop	{r3}
 80015f4:	469e      	mov	lr, r3
 80015f6:	4770      	bx	lr

080015f8 <_fini>:
 80015f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015fa:	bf00      	nop
 80015fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015fe:	bc08      	pop	{r3}
 8001600:	469e      	mov	lr, r3
 8001602:	4770      	bx	lr
