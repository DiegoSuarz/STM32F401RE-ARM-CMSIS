
02_GPIO_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000204  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  080003a0  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  000103a0  2**0
                  CONTENTS
  4 .ARM          00000000  08000398  08000398  000103a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000398  080003a0  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800039c  0800039c  0001039c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008e9  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000204  00000000  00000000  00010cb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00010ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc05  00000000  00000000  00010f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000af6  00000000  00000000  0001eb8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f507  00000000  00000000  0001f683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0006eb8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d4  00000000  00000000  0006ebdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000380 	.word	0x08000380

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000380 	.word	0x08000380

080001d4 <main>:
 */

void GPIO_Config(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
	uint16_t bit_state;
    /* Loop forever */
	GPIO_Config();
 80001da:	f000 f82d 	bl	8000238 <GPIO_Config>
	GPIOA->ODR |= 1U << 5; //GPIOA -> ODR |= (1<<5);
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <main+0x5c>)
 80001e0:	695b      	ldr	r3, [r3, #20]
 80001e2:	4a13      	ldr	r2, [pc, #76]	; (8000230 <main+0x5c>)
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~1U << 5;
 80001ea:	4b11      	ldr	r3, [pc, #68]	; (8000230 <main+0x5c>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a10      	ldr	r2, [pc, #64]	; (8000230 <main+0x5c>)
 80001f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80001f4:	6153      	str	r3, [r2, #20]

	GPIOA->BSRR |= GPIO_BSRR_BS5; //pone el alto
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <main+0x5c>)
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <main+0x5c>)
 80001fc:	f043 0320 	orr.w	r3, r3, #32
 8000200:	6193      	str	r3, [r2, #24]
	GPIOA->BSRR |= GPIO_BSRR_BR5; //pone el bajo
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <main+0x5c>)
 8000204:	699b      	ldr	r3, [r3, #24]
 8000206:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <main+0x5c>)
 8000208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800020c:	6193      	str	r3, [r2, #24]

	for(;;){
		bit_state = (GPIOC -> IDR>>13) & 0x1U; //extraer el valor de pin PC13
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <main+0x60>)
 8000210:	691b      	ldr	r3, [r3, #16]
 8000212:	0b5b      	lsrs	r3, r3, #13
 8000214:	b29b      	uxth	r3, r3
 8000216:	f003 0301 	and.w	r3, r3, #1
 800021a:	80fb      	strh	r3, [r7, #6]
		GPIOA->ODR |= bit_state<<5; //si el pulsador esta presionado cambia de estado
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <main+0x5c>)
 800021e:	695b      	ldr	r3, [r3, #20]
 8000220:	88fa      	ldrh	r2, [r7, #6]
 8000222:	0152      	lsls	r2, r2, #5
 8000224:	4611      	mov	r1, r2
 8000226:	4a02      	ldr	r2, [pc, #8]	; (8000230 <main+0x5c>)
 8000228:	430b      	orrs	r3, r1
 800022a:	6153      	str	r3, [r2, #20]
		bit_state = (GPIOC -> IDR>>13) & 0x1U; //extraer el valor de pin PC13
 800022c:	e7ef      	b.n	800020e <main+0x3a>
 800022e:	bf00      	nop
 8000230:	40020000 	.word	0x40020000
 8000234:	40020800 	.word	0x40020800

08000238 <GPIO_Config>:


	}
}

void GPIO_Config(void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0

	//habilitar el reloj
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIOAEN; //habilitar el reloj del PUERTO A y el puerto B
 800023c:	4b1d      	ldr	r3, [pc, #116]	; (80002b4 <GPIO_Config+0x7c>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000240:	4a1c      	ldr	r2, [pc, #112]	; (80002b4 <GPIO_Config+0x7c>)
 8000242:	f043 0305 	orr.w	r3, r3, #5
 8000246:	6313      	str	r3, [r2, #48]	; 0x30

	//PA5 ->Salida 01: General purpose output mode MODERy[1:0]
	GPIOA->MODER &= ~(GPIO_MODER_MODE5_1);
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <GPIO_Config+0x80>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <GPIO_Config+0x80>)
 800024e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000252:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODE5_0; //PA5 modo salida digital
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <GPIO_Config+0x80>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a17      	ldr	r2, [pc, #92]	; (80002b8 <GPIO_Config+0x80>)
 800025a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800025e:	6013      	str	r3, [r2, #0]

	GPIOA->OTYPER &=~ GPIO_OTYPER_OT5; //modo de salida push pull
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <GPIO_Config+0x80>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <GPIO_Config+0x80>)
 8000266:	f023 0320 	bic.w	r3, r3, #32
 800026a:	6053      	str	r3, [r2, #4]

	GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5; //velocidad very high speed
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <GPIO_Config+0x80>)
 800026e:	689b      	ldr	r3, [r3, #8]
 8000270:	4a11      	ldr	r2, [pc, #68]	; (80002b8 <GPIO_Config+0x80>)
 8000272:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000276:	6093      	str	r3, [r2, #8]

	GPIOA->PUPDR &=~GPIO_PUPDR_PUPD5; //desactivado pull up/ pull down
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <GPIO_Config+0x80>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a0e      	ldr	r2, [pc, #56]	; (80002b8 <GPIO_Config+0x80>)
 800027e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000282:	60d3      	str	r3, [r2, #12]

/*******************************************************************************/

	//PC13 ->Entrada 01: General purpose output mode MODERy[1:0]
	GPIOC -> MODER &=~ GPIO_MODER_MODE13; //PC13 modo entrada digital
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <GPIO_Config+0x84>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <GPIO_Config+0x84>)
 800028a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800028e:	6013      	str	r3, [r2, #0]

	GPIOC -> PUPDR &= ~GPIO_PUPDR_PUPD13_1;
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <GPIO_Config+0x84>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a09      	ldr	r2, [pc, #36]	; (80002bc <GPIO_Config+0x84>)
 8000296:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800029a:	60d3      	str	r3, [r2, #12]
	GPIOC -> PUPDR |= GPIO_PUPDR_PUPD13_0; // pull up activado
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <GPIO_Config+0x84>)
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	4a06      	ldr	r2, [pc, #24]	; (80002bc <GPIO_Config+0x84>)
 80002a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002a6:	60d3      	str	r3, [r2, #12]
	return;
 80002a8:	bf00      	nop

}
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000
 80002bc:	40020800 	.word	0x40020800

080002c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <SystemInit+0x20>)
 80002c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ca:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <SystemInit+0x20>)
 80002cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e8:	f7ff ffea 	bl	80002c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	; (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	; (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	; (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	; (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000312:	f000 f811 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000316:	f7ff ff5d 	bl	80001d4 <main>

0800031a <LoopForever>:

LoopForever:
    b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   r0, =_estack
 800031c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000328:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 800032c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000330:	2000001c 	.word	0x2000001c

08000334 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC_IRQHandler>
	...

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	4d0d      	ldr	r5, [pc, #52]	; (8000370 <__libc_init_array+0x38>)
 800033c:	4c0d      	ldr	r4, [pc, #52]	; (8000374 <__libc_init_array+0x3c>)
 800033e:	1b64      	subs	r4, r4, r5
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	2600      	movs	r6, #0
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	4d0b      	ldr	r5, [pc, #44]	; (8000378 <__libc_init_array+0x40>)
 800034a:	4c0c      	ldr	r4, [pc, #48]	; (800037c <__libc_init_array+0x44>)
 800034c:	f000 f818 	bl	8000380 <_init>
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	2600      	movs	r6, #0
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
